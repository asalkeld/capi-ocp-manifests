apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: clusterresourcesetbindings.addons.cluster.x-k8s.io
spec:
  group: addons.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: ClusterResourceSetBinding
    listKind: ClusterResourceSetBindingList
    plural: clusterresourcesetbindings
    singular: clusterresourcesetbinding
  scope: Namespaced
  versions:
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: ClusterResourceSetBinding lists all matching ClusterResourceSets
          with the cluster it belongs to.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterResourceSetBindingSpec defines the desired state of
              ClusterResourceSetBinding
            properties:
              bindings:
                description: Bindings is a list of ClusterResourceSets and their resources.
                items:
                  description: ResourceSetBinding keeps info on all of the resources
                    in a ClusterResourceSet.
                  properties:
                    clusterResourceSetName:
                      description: ClusterResourceSetName is the name of the ClusterResourceSet
                        that is applied to the owner cluster of the binding.
                      type: string
                    resources:
                      description: Resources is a list of resources that the ClusterResourceSet
                        has.
                      items:
                        description: ResourceBinding shows the status of a resource
                          that belongs to a ClusterResourceSet matched by the owner
                          cluster of the ClusterResourceSetBinding object.
                        properties:
                          applied:
                            description: Applied is to track if a resource is applied
                              to the cluster or not.
                            type: boolean
                          hash:
                            description: Hash is the hash of a resource's data. This
                              can be used to decide if a resource is changed. For
                              "ApplyOnce" ClusterResourceSet.spec.strategy, this is
                              no-op as that strategy does not act on change.
                            type: string
                          kind:
                            description: 'Kind of the resource. Supported kinds are:
                              Secrets and ConfigMaps.'
                            enum:
                            - Secret
                            - ConfigMap
                            type: string
                          lastAppliedTime:
                            description: LastAppliedTime identifies when this resource
                              was last applied to the cluster.
                            format: date-time
                            type: string
                          name:
                            description: Name of the resource that is in the same
                              namespace with ClusterResourceSet object.
                            minLength: 1
                            type: string
                        required:
                        - applied
                        - kind
                        - name
                        type: object
                      type: array
                  required:
                  - clusterResourceSetName
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: clusterresourcesets.addons.cluster.x-k8s.io
spec:
  group: addons.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: ClusterResourceSet
    listKind: ClusterResourceSetList
    plural: clusterresourcesets
    singular: clusterresourceset
  scope: Namespaced
  versions:
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: ClusterResourceSet is the Schema for the clusterresourcesets
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterResourceSetSpec defines the desired state of ClusterResourceSet
            properties:
              clusterSelector:
                description: Label selector for Clusters. The Clusters that are selected
                  by this will be the ones affected by this ClusterResourceSet. It
                  must match the Cluster labels. This field is immutable.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              resources:
                description: Resources is a list of Secrets/ConfigMaps where each
                  contains 1 or more resources to be applied to remote clusters.
                items:
                  description: ResourceRef specifies a resource.
                  properties:
                    kind:
                      description: 'Kind of the resource. Supported kinds are: Secrets
                        and ConfigMaps.'
                      enum:
                      - Secret
                      - ConfigMap
                      type: string
                    name:
                      description: Name of the resource that is in the same namespace
                        with ClusterResourceSet object.
                      minLength: 1
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              strategy:
                description: Strategy is the strategy to be used during applying resources.
                  Defaults to ApplyOnce. This field is immutable.
                enum:
                - ApplyOnce
                type: string
            required:
            - clusterSelector
            type: object
          status:
            description: ClusterResourceSetStatus defines the observed state of ClusterResourceSet
            properties:
              conditions:
                description: Conditions defines current state of the ClusterResourceSet.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration reflects the generation of the most
                  recently observed ClusterResourceSet.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/ipam-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha2: v1alpha2
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: ipaddresses.ipam.metal3.io
spec:
  group: ipam.metal3.io
  names:
    categories:
    - metal3
    kind: IPAddress
    listKind: IPAddressList
    plural: ipaddresses
    shortNames:
    - ipa
    - ipaddress
    - m3ipa
    - m3ipaddress
    - m3ipaddresses
    - metal3ipa
    - metal3ipaddress
    - metal3ipaddresses
    singular: ipaddress
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IPAddress is the Schema for the ipaddresses API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IPAddressSpec defines the desired state of IPAddress.
            properties:
              address:
                description: Address contains the IP address
                pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                type: string
              claim:
                description: Claim points to the object the IPClaim was created for.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              dnsServers:
                description: DNSServers is the list of dns servers
                items:
                  description: IPAddress is used for validation of an IP address
                  pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                  type: string
                type: array
              gateway:
                description: Gateway is the gateway ip address
                pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                type: string
              pool:
                description: Pool is the IPPool this was generated from.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              prefix:
                description: Prefix is the mask of the network as integer (max 128)
                maximum: 128
                type: integer
            required:
            - address
            - claim
            - pool
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/ipam-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha2: v1alpha2
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: ipclaims.ipam.metal3.io
spec:
  group: ipam.metal3.io
  names:
    categories:
    - cluster-api
    kind: IPClaim
    listKind: IPClaimList
    plural: ipclaims
    shortNames:
    - ipc
    - ipclaim
    - m3ipc
    - m3ipclaim
    - m3ipclaims
    - metal3ipc
    - metal3ipclaim
    - metal3ipclaims
    singular: ipclaim
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IPClaim is the Schema for the ipclaims API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IPClaimSpec defines the desired state of IPClaim.
            properties:
              pool:
                description: Pool is the IPPool this was generated from.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
            required:
            - pool
            type: object
          status:
            description: IPClaimStatus defines the observed state of IPClaim.
            properties:
              address:
                description: Address is the IPAddress that was generated for this
                  claim.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              errorMessage:
                description: ErrorMessage contains the error message
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/ipam-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.8
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha2: v1alpha2
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: ippools.ipam.metal3.io
spec:
  group: ipam.metal3.io
  names:
    categories:
    - cluster-api
    kind: IPPool
    listKind: IPPoolList
    plural: ippools
    shortNames:
    - ipp
    - ippool
    - m3ipp
    - m3ippool
    - m3ippools
    - metal3ipp
    - metal3ippool
    - metal3ippools
    singular: ippool
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Cluster to which this template belongs
      jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
      name: Cluster
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IPPool is the Schema for the ippools API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IPPoolSpec defines the desired state of IPPool.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                type: string
              dnsServers:
                description: DNSServers is the list of dns servers
                items:
                  description: IPAddress is used for validation of an IP address
                  pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                  type: string
                type: array
              gateway:
                description: Gateway is the gateway ip address
                pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                type: string
              namePrefix:
                description: namePrefix is the prefix used to generate the IPAddress
                  object names
                minLength: 1
                type: string
              pools:
                description: Pools contains the list of IP addresses pools
                items:
                  description: MetaDataIPAddress contains the info to render th ip
                    address. It is IP-version agnostic
                  properties:
                    dnsServers:
                      description: DNSServers is the list of dns servers
                      items:
                        description: IPAddress is used for validation of an IP address
                        pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                        type: string
                      type: array
                    end:
                      description: End is the last IP address that can be rendered.
                        It is used as a validation that the rendered IP is in bound.
                      pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                      type: string
                    gateway:
                      description: Gateway is the gateway ip address
                      pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                      type: string
                    prefix:
                      description: Prefix is the mask of the network as integer (max
                        128)
                      maximum: 128
                      type: integer
                    start:
                      description: Start is the first ip address that can be rendered
                      pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                      type: string
                    subnet:
                      description: Subnet is used to validate that the rendered IP
                        is in bounds. In case the Start value is not given, it is
                        derived from the subnet ip incremented by 1 (`192.168.0.1`
                        for `192.168.0.0/24`)
                      pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))/([0-9]|[1-2][0-9]|3[0-2])$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))/([0-9]|[0-9][0-9]|1[0-1][0-9]|12[0-8])$))
                      type: string
                  type: object
                type: array
              preAllocations:
                additionalProperties:
                  description: IPAddress is used for validation of an IP address
                  pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                  type: string
                description: PreAllocations contains the preallocated IP addresses
                type: object
              prefix:
                description: Prefix is the mask of the network as integer (max 128)
                maximum: 128
                type: integer
            required:
            - namePrefix
            type: object
          status:
            description: IPPoolStatus defines the observed state of IPPool.
            properties:
              indexes:
                additionalProperties:
                  description: IPAddress is used for validation of an IP address
                  pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                  type: string
                description: Allocations contains the map of objects and IP addresses
                  they have
                type: object
              lastUpdated:
                description: LastUpdated identifies when this status was last observed.
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capi-kubeadm-bootstrap-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.9
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    cluster.x-k8s.io/v1alpha2: v1alpha2
    cluster.x-k8s.io/v1alpha3: v1alpha3
  name: kubeadmconfigs.bootstrap.cluster.x-k8s.io
spec:
  group: bootstrap.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmConfig
    listKind: KubeadmConfigList
    plural: kubeadmconfigs
    singular: kubeadmconfig
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: KubeadmConfig is the Schema for the kubeadmconfigs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
              Either ClusterConfiguration and InitConfiguration should be defined
              or the JoinConfiguration should be defined.
            properties:
              clusterConfiguration:
                description: ClusterConfiguration along with InitConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiServer:
                    description: APIServer contains extra settings for the API server
                      control plane component
                    properties:
                      certSANs:
                        description: CertSANs sets extra Subject Alternative Names
                          for the API Server signing cert.
                        items:
                          type: string
                        type: array
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                      timeoutForControlPlane:
                        description: TimeoutForControlPlane controls the timeout that
                          we use for API server to appear
                        type: string
                    type: object
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  certificatesDir:
                    description: 'CertificatesDir specifies where to store or look
                      for all required certificates. NB: if not provided, this will
                      default to `/etc/kubernetes/pki`'
                    type: string
                  clusterName:
                    description: The cluster name
                    type: string
                  controlPlaneEndpoint:
                    description: 'ControlPlaneEndpoint sets a stable IP address or
                      DNS name for the control plane; it can be a valid IP address
                      or a RFC-1123 DNS subdomain, both with optional TCP port. In
                      case the ControlPlaneEndpoint is not specified, the AdvertiseAddress
                      + BindPort are used; in case the ControlPlaneEndpoint is specified
                      but without a TCP port, the BindPort is used. Possible usages
                      are: e.g. In a cluster with more than one control plane instances,
                      this field should be assigned the address of the external load
                      balancer in front of the control plane instances. e.g.  in environments
                      with enforced node recycling, the ControlPlaneEndpoint could
                      be used for assigning a stable DNS to the control plane. NB:
                      This value defaults to the first value in the Cluster object
                      status.apiEndpoints array.'
                    type: string
                  controllerManager:
                    description: ControllerManager contains extra settings for the
                      controller manager control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  dns:
                    description: DNS defines the options for the DNS add-on installed
                      in the cluster.
                    properties:
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. if not set, the ImageRepository defined
                          in ClusterConfiguration will be used instead.
                        type: string
                      imageTag:
                        description: ImageTag allows to specify a tag for the image.
                          In case this value is set, kubeadm does not change automatically
                          the version of the above components during upgrades.
                        type: string
                      type:
                        description: Type defines the DNS add-on to be used
                        type: string
                    type: object
                  etcd:
                    description: 'Etcd holds configuration for etcd. NB: This value
                      defaults to a Local (stacked) etcd'
                    properties:
                      external:
                        description: External describes how to connect to an external
                          etcd cluster Local and External are mutually exclusive
                        properties:
                          caFile:
                            description: CAFile is an SSL Certificate Authority file
                              used to secure etcd communication. Required if using
                              a TLS connection.
                            type: string
                          certFile:
                            description: CertFile is an SSL certification file used
                              to secure etcd communication. Required if using a TLS
                              connection.
                            type: string
                          endpoints:
                            description: Endpoints of etcd members. Required for ExternalEtcd.
                            items:
                              type: string
                            type: array
                          keyFile:
                            description: KeyFile is an SSL key file used to secure
                              etcd communication. Required if using a TLS connection.
                            type: string
                        required:
                        - caFile
                        - certFile
                        - endpoints
                        - keyFile
                        type: object
                      local:
                        description: Local provides configuration knobs for configuring
                          the local etcd instance Local and External are mutually
                          exclusive
                        properties:
                          dataDir:
                            description: DataDir is the directory etcd will place
                              its data. Defaults to "/var/lib/etcd".
                            type: string
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: ExtraArgs are extra arguments provided to
                              the etcd binary when run inside a static pod.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          peerCertSANs:
                            description: PeerCertSANs sets extra Subject Alternative
                              Names for the etcd peer signing cert.
                            items:
                              type: string
                            type: array
                          serverCertSANs:
                            description: ServerCertSANs sets extra Subject Alternative
                              Names for the etcd server signing cert.
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                  featureGates:
                    additionalProperties:
                      type: boolean
                    description: FeatureGates enabled by the user.
                    type: object
                  imageRepository:
                    description: ImageRepository sets the container registry to pull
                      images from. If empty, `k8s.gcr.io` will be used by default;
                      in case of kubernetes version is a CI build (kubernetes version
                      starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                      will be used as a default for control plane components and for
                      kube-proxy, while `k8s.gcr.io` will be used for all the other
                      images.
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  kubernetesVersion:
                    description: 'KubernetesVersion is the target version of the control
                      plane. NB: This value defaults to the Machine object spec.version'
                    type: string
                  networking:
                    description: 'Networking holds configuration for the networking
                      topology of the cluster. NB: This value defaults to the Cluster
                      object spec.clusterNetwork.'
                    properties:
                      dnsDomain:
                        description: DNSDomain is the dns domain used by k8s services.
                          Defaults to "cluster.local".
                        type: string
                      podSubnet:
                        description: PodSubnet is the subnet used by pods. If unset,
                          the API server will not allocate CIDR ranges for every node.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.services.cidrBlocks if that is set
                        type: string
                      serviceSubnet:
                        description: ServiceSubnet is the subnet used by k8s services.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.pods.cidrBlocks, or to "10.96.0.0/12"
                          if that's unset.
                        type: string
                    type: object
                  scheduler:
                    description: Scheduler contains extra settings for the scheduler
                      control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  useHyperKubeImage:
                    description: UseHyperKubeImage controls if hyperkube should be
                      used for Kubernetes components instead of their respective separate
                      images
                    type: boolean
                type: object
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  description: File defines the input for generating write_files in
                    cloud-init.
                  properties:
                    content:
                      description: Content is the actual content of the file.
                      type: string
                    encoding:
                      description: Encoding specifies the encoding of the file contents.
                      enum:
                      - base64
                      - gzip
                      - gzip+base64
                      type: string
                    owner:
                      description: Owner specifies the ownership of the file, e.g.
                        "root:root".
                      type: string
                    path:
                      description: Path specifies the full path on disk where to store
                        the file.
                      type: string
                    permissions:
                      description: Permissions specifies the permissions to assign
                        to the file, e.g. "0640".
                      type: string
                  required:
                  - content
                  - path
                  type: object
                type: array
              format:
                description: Format specifies the output format of the bootstrap data
                enum:
                - cloud-config
                type: string
              initConfiguration:
                description: InitConfiguration along with ClusterConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  bootstrapTokens:
                    description: BootstrapTokens is respected at `kubeadm init` time
                      and describes a set of Bootstrap Tokens to create. This information
                      IS NOT uploaded to the kubeadm cluster configmap, partly because
                      of its sensitive nature
                    items:
                      description: BootstrapToken describes one bootstrap token, stored
                        as a Secret in the cluster
                      properties:
                        description:
                          description: Description sets a human-friendly message why
                            this token exists and what it's used for, so other administrators
                            can know its purpose.
                          type: string
                        expires:
                          description: Expires specifies the timestamp when this token
                            expires. Defaults to being set dynamically at runtime
                            based on the TTL. Expires and TTL are mutually exclusive.
                          format: date-time
                          type: string
                        groups:
                          description: Groups specifies the extra groups that this
                            token will authenticate as when/if used for authentication
                          items:
                            type: string
                          type: array
                        token:
                          description: Token is used for establishing bidirectional
                            trust between nodes and control-planes. Used for joining
                            nodes in the cluster.
                          type: object
                        ttl:
                          description: TTL defines the time to live for this token.
                            Defaults to 24h. Expires and TTL are mutually exclusive.
                          type: string
                        usages:
                          description: Usages describes the ways in which this token
                            can be used. Can by default be used for establishing bidirectional
                            trust, but that can be changed here.
                          items:
                            type: string
                          type: array
                      required:
                      - token
                      type: object
                    type: array
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  localAPIEndpoint:
                    description: LocalAPIEndpoint represents the endpoint of the API
                      server instance that's deployed on this control plane node In
                      HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                      in the sense that ControlPlaneEndpoint is the global endpoint
                      for the cluster, which then loadbalances the requests to each
                      individual API server. This configuration object lets you customize
                      what IP/DNS name and port the local API server advertises it's
                      accessible on. By default, kubeadm tries to auto-detect the
                      IP of the default interface and use that, but in case that process
                      fails you may set the desired value here.
                    properties:
                      advertiseAddress:
                        description: AdvertiseAddress sets the IP address for the
                          API server to advertise.
                        type: string
                      bindPort:
                        description: BindPort sets the secure port for the API Server
                          to bind to. Defaults to 6443.
                        format: int32
                        type: integer
                    required:
                    - advertiseAddress
                    - bindPort
                    type: object
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: Required. The taint value corresponding
                                to the taint key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              joinConfiguration:
                description: JoinConfiguration is the kubeadm configuration for the
                  join command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  caCertPath:
                    description: 'CACertPath is the path to the SSL certificate authority
                      used to secure comunications between node and control-plane.
                      Defaults to "/etc/kubernetes/pki/ca.crt". TODO: revisit when
                      there is defaulting from k/k'
                    type: string
                  controlPlane:
                    description: ControlPlane defines the additional control plane
                      instance to be deployed on the joining node. If nil, no additional
                      control plane instance will be deployed.
                    properties:
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance to be deployed on this node.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        required:
                        - advertiseAddress
                        - bindPort
                        type: object
                    type: object
                  discovery:
                    description: 'Discovery specifies the options for the kubelet
                      to use during the TLS Bootstrap process TODO: revisit when there
                      is defaulting from k/k'
                    properties:
                      bootstrapToken:
                        description: BootstrapToken is used to set the options for
                          bootstrap token based discovery BootstrapToken and File
                          are mutually exclusive
                        properties:
                          apiServerEndpoint:
                            description: APIServerEndpoint is an IP or domain name
                              to the API server from which info will be fetched.
                            type: string
                          caCertHashes:
                            description: 'CACertHashes specifies a set of public key
                              pins to verify when token-based discovery is used. The
                              root CA found during discovery must match one of these
                              values. Specifying an empty set disables root CA pinning,
                              which can be unsafe. Each hash is specified as "<type>:<value>",
                              where the only currently supported type is "sha256".
                              This is a hex-encoded SHA-256 hash of the Subject Public
                              Key Info (SPKI) object in DER-encoded ASN.1. These hashes
                              can be calculated using, for example, OpenSSL: openssl
                              x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                              der 2>&/dev/null | openssl dgst -sha256 -hex'
                            items:
                              type: string
                            type: array
                          token:
                            description: Token is a token used to validate cluster
                              information fetched from the control-plane.
                            type: string
                          unsafeSkipCAVerification:
                            description: UnsafeSkipCAVerification allows token-based
                              discovery without CA verification via CACertHashes.
                              This can weaken the security of kubeadm since other
                              nodes can impersonate the control-plane.
                            type: boolean
                        required:
                        - token
                        - unsafeSkipCAVerification
                        type: object
                      file:
                        description: File is used to specify a file or URL to a kubeconfig
                          file from which to load cluster information BootstrapToken
                          and File are mutually exclusive
                        properties:
                          kubeConfigPath:
                            description: KubeConfigPath is used to specify the actual
                              file path or URL to the kubeconfig file from which to
                              load cluster information
                            type: string
                        required:
                        - kubeConfigPath
                        type: object
                      timeout:
                        description: Timeout modifies the discovery timeout
                        type: string
                      tlsBootstrapToken:
                        description: 'TLSBootstrapToken is a token used for TLS bootstrapping.
                          If .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token,
                          but can be overridden. If .File is set, this field **must
                          be set** in case the KubeConfigFile does not contain any
                          other authentication information TODO: revisit when there
                          is defaulting from k/k'
                        type: string
                    type: object
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: Required. The taint value corresponding
                                to the taint key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              ntp:
                description: NTP specifies NTP configuration
                properties:
                  enabled:
                    description: Enabled specifies whether NTP should be enabled
                    type: boolean
                  servers:
                    description: Servers specifies which NTP servers to use
                    items:
                      type: string
                    type: array
                type: object
              postKubeadmCommands:
                description: PostKubeadmCommands specifies extra commands to run after
                  kubeadm runs
                items:
                  type: string
                type: array
              preKubeadmCommands:
                description: PreKubeadmCommands specifies extra commands to run before
                  kubeadm runs
                items:
                  type: string
                type: array
              users:
                description: Users specifies extra users to add
                items:
                  description: User defines the input for a generated user in cloud-init.
                  properties:
                    gecos:
                      description: Gecos specifies the gecos to use for the user
                      type: string
                    groups:
                      description: Groups specifies the additional groups for the
                        user
                      type: string
                    homeDir:
                      description: HomeDir specifies the home directory to use for
                        the user
                      type: string
                    inactive:
                      description: Inactive specifies whether to mark the user as
                        inactive
                      type: boolean
                    lockPassword:
                      description: LockPassword specifies if password login should
                        be disabled
                      type: boolean
                    name:
                      description: Name specifies the user name
                      type: string
                    passwd:
                      description: Passwd specifies a hashed password for the user
                      type: string
                    primaryGroup:
                      description: PrimaryGroup specifies the primary group for the
                        user
                      type: string
                    shell:
                      description: Shell specifies the user's shell
                      type: string
                    sshAuthorizedKeys:
                      description: SSHAuthorizedKeys specifies a list of ssh authorized
                        keys for the user
                      items:
                        type: string
                      type: array
                    sudo:
                      description: Sudo specifies a sudo role for the user
                      type: string
                  required:
                  - name
                  type: object
                type: array
            type: object
          status:
            description: KubeadmConfigStatus defines the observed state of KubeadmConfig
            properties:
              bootstrapData:
                description: BootstrapData will be a cloud-init script for now
                format: byte
                type: string
              errorMessage:
                description: ErrorMessage will be set on non-retryable errors
                type: string
              errorReason:
                description: ErrorReason will be set on non-retryable errors
                type: string
              ready:
                description: Ready indicates the BootstrapData field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: KubeadmConfig is the Schema for the kubeadmconfigs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
              Either ClusterConfiguration and InitConfiguration should be defined
              or the JoinConfiguration should be defined.
            properties:
              clusterConfiguration:
                description: ClusterConfiguration along with InitConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiServer:
                    description: APIServer contains extra settings for the API server
                      control plane component
                    properties:
                      certSANs:
                        description: CertSANs sets extra Subject Alternative Names
                          for the API Server signing cert.
                        items:
                          type: string
                        type: array
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                      timeoutForControlPlane:
                        description: TimeoutForControlPlane controls the timeout that
                          we use for API server to appear
                        type: string
                    type: object
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  certificatesDir:
                    description: 'CertificatesDir specifies where to store or look
                      for all required certificates. NB: if not provided, this will
                      default to `/etc/kubernetes/pki`'
                    type: string
                  clusterName:
                    description: The cluster name
                    type: string
                  controlPlaneEndpoint:
                    description: 'ControlPlaneEndpoint sets a stable IP address or
                      DNS name for the control plane; it can be a valid IP address
                      or a RFC-1123 DNS subdomain, both with optional TCP port. In
                      case the ControlPlaneEndpoint is not specified, the AdvertiseAddress
                      + BindPort are used; in case the ControlPlaneEndpoint is specified
                      but without a TCP port, the BindPort is used. Possible usages
                      are: e.g. In a cluster with more than one control plane instances,
                      this field should be assigned the address of the external load
                      balancer in front of the control plane instances. e.g.  in environments
                      with enforced node recycling, the ControlPlaneEndpoint could
                      be used for assigning a stable DNS to the control plane. NB:
                      This value defaults to the first value in the Cluster object
                      status.apiEndpoints array.'
                    type: string
                  controllerManager:
                    description: ControllerManager contains extra settings for the
                      controller manager control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  dns:
                    description: DNS defines the options for the DNS add-on installed
                      in the cluster.
                    properties:
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. if not set, the ImageRepository defined
                          in ClusterConfiguration will be used instead.
                        type: string
                      imageTag:
                        description: ImageTag allows to specify a tag for the image.
                          In case this value is set, kubeadm does not change automatically
                          the version of the above components during upgrades.
                        type: string
                      type:
                        description: Type defines the DNS add-on to be used
                        type: string
                    type: object
                  etcd:
                    description: 'Etcd holds configuration for etcd. NB: This value
                      defaults to a Local (stacked) etcd'
                    properties:
                      external:
                        description: External describes how to connect to an external
                          etcd cluster Local and External are mutually exclusive
                        properties:
                          caFile:
                            description: CAFile is an SSL Certificate Authority file
                              used to secure etcd communication. Required if using
                              a TLS connection.
                            type: string
                          certFile:
                            description: CertFile is an SSL certification file used
                              to secure etcd communication. Required if using a TLS
                              connection.
                            type: string
                          endpoints:
                            description: Endpoints of etcd members. Required for ExternalEtcd.
                            items:
                              type: string
                            type: array
                          keyFile:
                            description: KeyFile is an SSL key file used to secure
                              etcd communication. Required if using a TLS connection.
                            type: string
                        required:
                        - caFile
                        - certFile
                        - endpoints
                        - keyFile
                        type: object
                      local:
                        description: Local provides configuration knobs for configuring
                          the local etcd instance Local and External are mutually
                          exclusive
                        properties:
                          dataDir:
                            description: DataDir is the directory etcd will place
                              its data. Defaults to "/var/lib/etcd".
                            type: string
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: ExtraArgs are extra arguments provided to
                              the etcd binary when run inside a static pod.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          peerCertSANs:
                            description: PeerCertSANs sets extra Subject Alternative
                              Names for the etcd peer signing cert.
                            items:
                              type: string
                            type: array
                          serverCertSANs:
                            description: ServerCertSANs sets extra Subject Alternative
                              Names for the etcd server signing cert.
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                  featureGates:
                    additionalProperties:
                      type: boolean
                    description: FeatureGates enabled by the user.
                    type: object
                  imageRepository:
                    description: ImageRepository sets the container registry to pull
                      images from. If empty, `k8s.gcr.io` will be used by default;
                      in case of kubernetes version is a CI build (kubernetes version
                      starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                      will be used as a default for control plane components and for
                      kube-proxy, while `k8s.gcr.io` will be used for all the other
                      images.
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  kubernetesVersion:
                    description: 'KubernetesVersion is the target version of the control
                      plane. NB: This value defaults to the Machine object spec.version'
                    type: string
                  networking:
                    description: 'Networking holds configuration for the networking
                      topology of the cluster. NB: This value defaults to the Cluster
                      object spec.clusterNetwork.'
                    properties:
                      dnsDomain:
                        description: DNSDomain is the dns domain used by k8s services.
                          Defaults to "cluster.local".
                        type: string
                      podSubnet:
                        description: PodSubnet is the subnet used by pods. If unset,
                          the API server will not allocate CIDR ranges for every node.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.services.cidrBlocks if that is set
                        type: string
                      serviceSubnet:
                        description: ServiceSubnet is the subnet used by k8s services.
                          Defaults to a comma-delimited string of the Cluster object's
                          spec.clusterNetwork.pods.cidrBlocks, or to "10.96.0.0/12"
                          if that's unset.
                        type: string
                    type: object
                  scheduler:
                    description: Scheduler contains extra settings for the scheduler
                      control plane component
                    properties:
                      extraArgs:
                        additionalProperties:
                          type: string
                        description: 'ExtraArgs is an extra set of flags to pass to
                          the control plane component. TODO: This is temporary and
                          ideally we would like to switch all components to use ComponentConfig
                          + ConfigMaps.'
                        type: object
                      extraVolumes:
                        description: ExtraVolumes is an extra set of host volumes,
                          mounted to the control plane component.
                        items:
                          description: HostPathMount contains elements describing
                            volumes that are mounted from the host.
                          properties:
                            hostPath:
                              description: HostPath is the path in the host that will
                                be mounted inside the pod.
                              type: string
                            mountPath:
                              description: MountPath is the path inside the pod where
                                hostPath will be mounted.
                              type: string
                            name:
                              description: Name of the volume inside the pod template.
                              type: string
                            pathType:
                              description: PathType is the type of the HostPath.
                              type: string
                            readOnly:
                              description: ReadOnly controls write access to the volume
                              type: boolean
                          required:
                          - hostPath
                          - mountPath
                          - name
                          type: object
                        type: array
                    type: object
                  useHyperKubeImage:
                    description: UseHyperKubeImage controls if hyperkube should be
                      used for Kubernetes components instead of their respective separate
                      images
                    type: boolean
                type: object
              diskSetup:
                description: DiskSetup specifies options for the creation of partition
                  tables and file systems on devices.
                properties:
                  filesystems:
                    description: Filesystems specifies the list of file systems to
                      setup.
                    items:
                      description: Filesystem defines the file systems to be created.
                      properties:
                        device:
                          description: Device specifies the device name
                          type: string
                        extraOpts:
                          description: ExtraOpts defined extra options to add to the
                            command for creating the file system.
                          items:
                            type: string
                          type: array
                        filesystem:
                          description: Filesystem specifies the file system type.
                          type: string
                        label:
                          description: Label specifies the file system label to be
                            used. If set to None, no label is used.
                          type: string
                        overwrite:
                          description: Overwrite defines whether or not to overwrite
                            any existing filesystem. If true, any pre-existing file
                            system will be destroyed. Use with Caution.
                          type: boolean
                        partition:
                          description: 'Partition specifies the partition to use.
                            The valid options are: "auto|any", "auto", "any", "none",
                            and <NUM>, where NUM is the actual partition number.'
                          type: string
                        replaceFS:
                          description: 'ReplaceFS is a special directive, used for
                            Microsoft Azure that instructs cloud-init to replace a
                            file system of <FS_TYPE>. NOTE: unless you define a label,
                            this requires the use of the ''any'' partition directive.'
                          type: string
                      required:
                      - device
                      - filesystem
                      - label
                      type: object
                    type: array
                  partitions:
                    description: Partitions specifies the list of the partitions to
                      setup.
                    items:
                      description: Partition defines how to create and layout a partition.
                      properties:
                        device:
                          description: Device is the name of the device.
                          type: string
                        layout:
                          description: Layout specifies the device layout. If it is
                            true, a single partition will be created for the entire
                            device. When layout is false, it means don't partition
                            or ignore existing partitioning.
                          type: boolean
                        overwrite:
                          description: Overwrite describes whether to skip checks
                            and create the partition if a partition or filesystem
                            is found on the device. Use with caution. Default is 'false'.
                          type: boolean
                        tableType:
                          description: 'TableType specifies the tupe of partition
                            table. The following are supported: ''mbr'': default and
                            setups a MS-DOS partition table ''gpt'': setups a GPT
                            partition table'
                          type: string
                      required:
                      - device
                      - layout
                      type: object
                    type: array
                type: object
              files:
                description: Files specifies extra files to be passed to user_data
                  upon creation.
                items:
                  description: File defines the input for generating write_files in
                    cloud-init.
                  properties:
                    content:
                      description: Content is the actual content of the file.
                      type: string
                    contentFrom:
                      description: ContentFrom is a referenced source of content to
                        populate the file.
                      properties:
                        secret:
                          description: Secret represents a secret that should populate
                            this file.
                          properties:
                            key:
                              description: Key is the key in the secret's data map
                                for this value.
                              type: string
                            name:
                              description: Name of the secret in the KubeadmBootstrapConfig's
                                namespace to use.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                      required:
                      - secret
                      type: object
                    encoding:
                      description: Encoding specifies the encoding of the file contents.
                      enum:
                      - base64
                      - gzip
                      - gzip+base64
                      type: string
                    owner:
                      description: Owner specifies the ownership of the file, e.g.
                        "root:root".
                      type: string
                    path:
                      description: Path specifies the full path on disk where to store
                        the file.
                      type: string
                    permissions:
                      description: Permissions specifies the permissions to assign
                        to the file, e.g. "0640".
                      type: string
                  required:
                  - path
                  type: object
                type: array
              format:
                description: Format specifies the output format of the bootstrap data
                enum:
                - cloud-config
                type: string
              initConfiguration:
                description: InitConfiguration along with ClusterConfiguration are
                  the configurations necessary for the init command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  bootstrapTokens:
                    description: BootstrapTokens is respected at `kubeadm init` time
                      and describes a set of Bootstrap Tokens to create. This information
                      IS NOT uploaded to the kubeadm cluster configmap, partly because
                      of its sensitive nature
                    items:
                      description: BootstrapToken describes one bootstrap token, stored
                        as a Secret in the cluster
                      properties:
                        description:
                          description: Description sets a human-friendly message why
                            this token exists and what it's used for, so other administrators
                            can know its purpose.
                          type: string
                        expires:
                          description: Expires specifies the timestamp when this token
                            expires. Defaults to being set dynamically at runtime
                            based on the TTL. Expires and TTL are mutually exclusive.
                          format: date-time
                          type: string
                        groups:
                          description: Groups specifies the extra groups that this
                            token will authenticate as when/if used for authentication
                          items:
                            type: string
                          type: array
                        token:
                          description: Token is used for establishing bidirectional
                            trust between nodes and control-planes. Used for joining
                            nodes in the cluster.
                          type: object
                        ttl:
                          description: TTL defines the time to live for this token.
                            Defaults to 24h. Expires and TTL are mutually exclusive.
                          type: string
                        usages:
                          description: Usages describes the ways in which this token
                            can be used. Can by default be used for establishing bidirectional
                            trust, but that can be changed here.
                          items:
                            type: string
                          type: array
                      required:
                      - token
                      type: object
                    type: array
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  localAPIEndpoint:
                    description: LocalAPIEndpoint represents the endpoint of the API
                      server instance that's deployed on this control plane node In
                      HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                      in the sense that ControlPlaneEndpoint is the global endpoint
                      for the cluster, which then loadbalances the requests to each
                      individual API server. This configuration object lets you customize
                      what IP/DNS name and port the local API server advertises it's
                      accessible on. By default, kubeadm tries to auto-detect the
                      IP of the default interface and use that, but in case that process
                      fails you may set the desired value here.
                    properties:
                      advertiseAddress:
                        description: AdvertiseAddress sets the IP address for the
                          API server to advertise.
                        type: string
                      bindPort:
                        description: BindPort sets the secure port for the API Server
                          to bind to. Defaults to 6443.
                        format: int32
                        type: integer
                    required:
                    - advertiseAddress
                    - bindPort
                    type: object
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: Required. The taint value corresponding
                                to the taint key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              joinConfiguration:
                description: JoinConfiguration is the kubeadm configuration for the
                  join command
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  caCertPath:
                    description: 'CACertPath is the path to the SSL certificate authority
                      used to secure comunications between node and control-plane.
                      Defaults to "/etc/kubernetes/pki/ca.crt". TODO: revisit when
                      there is defaulting from k/k'
                    type: string
                  controlPlane:
                    description: ControlPlane defines the additional control plane
                      instance to be deployed on the joining node. If nil, no additional
                      control plane instance will be deployed.
                    properties:
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance to be deployed on this node.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        required:
                        - advertiseAddress
                        - bindPort
                        type: object
                    type: object
                  discovery:
                    description: 'Discovery specifies the options for the kubelet
                      to use during the TLS Bootstrap process TODO: revisit when there
                      is defaulting from k/k'
                    properties:
                      bootstrapToken:
                        description: BootstrapToken is used to set the options for
                          bootstrap token based discovery BootstrapToken and File
                          are mutually exclusive
                        properties:
                          apiServerEndpoint:
                            description: APIServerEndpoint is an IP or domain name
                              to the API server from which info will be fetched.
                            type: string
                          caCertHashes:
                            description: 'CACertHashes specifies a set of public key
                              pins to verify when token-based discovery is used. The
                              root CA found during discovery must match one of these
                              values. Specifying an empty set disables root CA pinning,
                              which can be unsafe. Each hash is specified as "<type>:<value>",
                              where the only currently supported type is "sha256".
                              This is a hex-encoded SHA-256 hash of the Subject Public
                              Key Info (SPKI) object in DER-encoded ASN.1. These hashes
                              can be calculated using, for example, OpenSSL: openssl
                              x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                              der 2>&/dev/null | openssl dgst -sha256 -hex'
                            items:
                              type: string
                            type: array
                          token:
                            description: Token is a token used to validate cluster
                              information fetched from the control-plane.
                            type: string
                          unsafeSkipCAVerification:
                            description: UnsafeSkipCAVerification allows token-based
                              discovery without CA verification via CACertHashes.
                              This can weaken the security of kubeadm since other
                              nodes can impersonate the control-plane.
                            type: boolean
                        required:
                        - token
                        - unsafeSkipCAVerification
                        type: object
                      file:
                        description: File is used to specify a file or URL to a kubeconfig
                          file from which to load cluster information BootstrapToken
                          and File are mutually exclusive
                        properties:
                          kubeConfigPath:
                            description: KubeConfigPath is used to specify the actual
                              file path or URL to the kubeconfig file from which to
                              load cluster information
                            type: string
                        required:
                        - kubeConfigPath
                        type: object
                      timeout:
                        description: Timeout modifies the discovery timeout
                        type: string
                      tlsBootstrapToken:
                        description: 'TLSBootstrapToken is a token used for TLS bootstrapping.
                          If .BootstrapToken is set, this field is defaulted to .BootstrapToken.Token,
                          but can be overridden. If .File is set, this field **must
                          be set** in case the KubeConfigFile does not contain any
                          other authentication information TODO: revisit when there
                          is defaulting from k/k'
                        type: string
                    type: object
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  nodeRegistration:
                    description: NodeRegistration holds fields that relate to registering
                      the new control-plane node to the cluster. When used in the
                      context of control plane nodes, NodeRegistration should remain
                      consistent across both InitConfiguration and JoinConfiguration
                    properties:
                      criSocket:
                        description: CRISocket is used to retrieve container runtime
                          info. This information will be annotated to the Node API
                          object, for later re-use
                        type: string
                      kubeletExtraArgs:
                        additionalProperties:
                          type: string
                        description: KubeletExtraArgs passes through extra arguments
                          to the kubelet. The arguments here are passed to the kubelet
                          command line via the environment file kubeadm writes at
                          runtime for the kubelet to source. This overrides the generic
                          base-level configuration in the kubelet-config-1.X ConfigMap
                          Flags have higher priority when parsing. These values are
                          local and specific to the node kubeadm is executing on.
                        type: object
                      name:
                        description: Name is the `.Metadata.Name` field of the Node
                          API object that will be created in this `kubeadm init` or
                          `kubeadm join` operation. This field is also used in the
                          CommonName field of the kubelet's client certificate to
                          the API server. Defaults to the hostname of the node if
                          not provided.
                        type: string
                      taints:
                        description: 'Taints specifies the taints the Node API object
                          should be registered with. If this field is unset, i.e.
                          nil, in the `kubeadm init` process it will be defaulted
                          to []v1.Taint{''node-role.kubernetes.io/master=""''}. If
                          you don''t want to taint your control-plane node, set this
                          field to an empty slice, i.e. `taints: {}` in the YAML file.
                          This field is solely used for Node registration.'
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: Required. The taint value corresponding
                                to the taint key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                    type: object
                type: object
              mounts:
                description: Mounts specifies a list of mount points to be setup.
                items:
                  description: MountPoints defines input for generated mounts in cloud-init.
                  items:
                    type: string
                  type: array
                type: array
              ntp:
                description: NTP specifies NTP configuration
                properties:
                  enabled:
                    description: Enabled specifies whether NTP should be enabled
                    type: boolean
                  servers:
                    description: Servers specifies which NTP servers to use
                    items:
                      type: string
                    type: array
                type: object
              postKubeadmCommands:
                description: PostKubeadmCommands specifies extra commands to run after
                  kubeadm runs
                items:
                  type: string
                type: array
              preKubeadmCommands:
                description: PreKubeadmCommands specifies extra commands to run before
                  kubeadm runs
                items:
                  type: string
                type: array
              useExperimentalRetryJoin:
                description: "UseExperimentalRetryJoin replaces a basic kubeadm command
                  with a shell script with retries for joins. \n This is meant to
                  be an experimental temporary workaround on some environments where
                  joins fail due to timing (and other issues). The long term goal
                  is to add retries to kubeadm proper and use that functionality.
                  \n This will add about 40KB to userdata \n For more information,
                  refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                type: boolean
              users:
                description: Users specifies extra users to add
                items:
                  description: User defines the input for a generated user in cloud-init.
                  properties:
                    gecos:
                      description: Gecos specifies the gecos to use for the user
                      type: string
                    groups:
                      description: Groups specifies the additional groups for the
                        user
                      type: string
                    homeDir:
                      description: HomeDir specifies the home directory to use for
                        the user
                      type: string
                    inactive:
                      description: Inactive specifies whether to mark the user as
                        inactive
                      type: boolean
                    lockPassword:
                      description: LockPassword specifies if password login should
                        be disabled
                      type: boolean
                    name:
                      description: Name specifies the user name
                      type: string
                    passwd:
                      description: Passwd specifies a hashed password for the user
                      type: string
                    primaryGroup:
                      description: PrimaryGroup specifies the primary group for the
                        user
                      type: string
                    shell:
                      description: Shell specifies the user's shell
                      type: string
                    sshAuthorizedKeys:
                      description: SSHAuthorizedKeys specifies a list of ssh authorized
                        keys for the user
                      items:
                        type: string
                      type: array
                    sudo:
                      description: Sudo specifies a sudo role for the user
                      type: string
                  required:
                  - name
                  type: object
                type: array
              verbosity:
                description: Verbosity is the number for the kubeadm log level verbosity.
                  It overrides the `--v` flag in kubeadm commands.
                format: int32
                type: integer
            type: object
          status:
            description: KubeadmConfigStatus defines the observed state of KubeadmConfig
            properties:
              bootstrapData:
                description: "BootstrapData will be a cloud-init script for now. \n
                  Deprecated: This field has been deprecated in v1alpha3 and will
                  be removed in a future version. Switch to DataSecretName."
                format: byte
                type: string
              conditions:
                description: Conditions defines current service state of the KubeadmConfig.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              dataSecretName:
                description: DataSecretName is the name of the secret that stores
                  the bootstrap data script.
                type: string
              failureMessage:
                description: FailureMessage will be set on non-retryable errors
                type: string
              failureReason:
                description: FailureReason will be set on non-retryable errors
                type: string
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              ready:
                description: Ready indicates the BootstrapData field is ready to be
                  consumed
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capi-kubeadm-bootstrap-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.9
  labels:
    cluster.x-k8s.io/provider: bootstrap-kubeadm
    cluster.x-k8s.io/v1alpha2: v1alpha2
    cluster.x-k8s.io/v1alpha3: v1alpha3
  name: kubeadmconfigtemplates.bootstrap.cluster.x-k8s.io
spec:
  group: bootstrap.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmConfigTemplate
    listKind: KubeadmConfigTemplateList
    plural: kubeadmconfigtemplates
    singular: kubeadmconfigtemplate
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigTemplateSpec defines the desired state of KubeadmConfigTemplate
            properties:
              template:
                description: KubeadmConfigTemplateResource defines the Template structure
                properties:
                  spec:
                    description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
                      Either ClusterConfiguration and InitConfiguration should be
                      defined or the JoinConfiguration should be defined.
                    properties:
                      clusterConfiguration:
                        description: ClusterConfiguration along with InitConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiServer:
                            description: APIServer contains extra settings for the
                              API server control plane component
                            properties:
                              certSANs:
                                description: CertSANs sets extra Subject Alternative
                                  Names for the API Server signing cert.
                                items:
                                  type: string
                                type: array
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                              timeoutForControlPlane:
                                description: TimeoutForControlPlane controls the timeout
                                  that we use for API server to appear
                                type: string
                            type: object
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          certificatesDir:
                            description: 'CertificatesDir specifies where to store
                              or look for all required certificates. NB: if not provided,
                              this will default to `/etc/kubernetes/pki`'
                            type: string
                          clusterName:
                            description: The cluster name
                            type: string
                          controlPlaneEndpoint:
                            description: 'ControlPlaneEndpoint sets a stable IP address
                              or DNS name for the control plane; it can be a valid
                              IP address or a RFC-1123 DNS subdomain, both with optional
                              TCP port. In case the ControlPlaneEndpoint is not specified,
                              the AdvertiseAddress + BindPort are used; in case the
                              ControlPlaneEndpoint is specified but without a TCP
                              port, the BindPort is used. Possible usages are: e.g.
                              In a cluster with more than one control plane instances,
                              this field should be assigned the address of the external
                              load balancer in front of the control plane instances.
                              e.g.  in environments with enforced node recycling,
                              the ControlPlaneEndpoint could be used for assigning
                              a stable DNS to the control plane. NB: This value defaults
                              to the first value in the Cluster object status.apiEndpoints
                              array.'
                            type: string
                          controllerManager:
                            description: ControllerManager contains extra settings
                              for the controller manager control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          dns:
                            description: DNS defines the options for the DNS add-on
                              installed in the cluster.
                            properties:
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              type:
                                description: Type defines the DNS add-on to be used
                                type: string
                            type: object
                          etcd:
                            description: 'Etcd holds configuration for etcd. NB: This
                              value defaults to a Local (stacked) etcd'
                            properties:
                              external:
                                description: External describes how to connect to
                                  an external etcd cluster Local and External are
                                  mutually exclusive
                                properties:
                                  caFile:
                                    description: CAFile is an SSL Certificate Authority
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  certFile:
                                    description: CertFile is an SSL certification
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  endpoints:
                                    description: Endpoints of etcd members. Required
                                      for ExternalEtcd.
                                    items:
                                      type: string
                                    type: array
                                  keyFile:
                                    description: KeyFile is an SSL key file used to
                                      secure etcd communication. Required if using
                                      a TLS connection.
                                    type: string
                                required:
                                - caFile
                                - certFile
                                - endpoints
                                - keyFile
                                type: object
                              local:
                                description: Local provides configuration knobs for
                                  configuring the local etcd instance Local and External
                                  are mutually exclusive
                                properties:
                                  dataDir:
                                    description: DataDir is the directory etcd will
                                      place its data. Defaults to "/var/lib/etcd".
                                    type: string
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: ExtraArgs are extra arguments provided
                                      to the etcd binary when run inside a static
                                      pod.
                                    type: object
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                  peerCertSANs:
                                    description: PeerCertSANs sets extra Subject Alternative
                                      Names for the etcd peer signing cert.
                                    items:
                                      type: string
                                    type: array
                                  serverCertSANs:
                                    description: ServerCertSANs sets extra Subject
                                      Alternative Names for the etcd server signing
                                      cert.
                                    items:
                                      type: string
                                    type: array
                                type: object
                            type: object
                          featureGates:
                            additionalProperties:
                              type: boolean
                            description: FeatureGates enabled by the user.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. If empty, `k8s.gcr.io` will be
                              used by default; in case of kubernetes version is a
                              CI build (kubernetes version starts with `ci/` or `ci-cross/`)
                              `gcr.io/k8s-staging-ci-images` will be used as a default
                              for control plane components and for kube-proxy, while
                              `k8s.gcr.io` will be used for all the other images.
                            type: string
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          kubernetesVersion:
                            description: 'KubernetesVersion is the target version
                              of the control plane. NB: This value defaults to the
                              Machine object spec.version'
                            type: string
                          networking:
                            description: 'Networking holds configuration for the networking
                              topology of the cluster. NB: This value defaults to
                              the Cluster object spec.clusterNetwork.'
                            properties:
                              dnsDomain:
                                description: DNSDomain is the dns domain used by k8s
                                  services. Defaults to "cluster.local".
                                type: string
                              podSubnet:
                                description: PodSubnet is the subnet used by pods.
                                  If unset, the API server will not allocate CIDR
                                  ranges for every node. Defaults to a comma-delimited
                                  string of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                  if that is set
                                type: string
                              serviceSubnet:
                                description: ServiceSubnet is the subnet used by k8s
                                  services. Defaults to a comma-delimited string of
                                  the Cluster object's spec.clusterNetwork.pods.cidrBlocks,
                                  or to "10.96.0.0/12" if that's unset.
                                type: string
                            type: object
                          scheduler:
                            description: Scheduler contains extra settings for the
                              scheduler control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          useHyperKubeImage:
                            description: UseHyperKubeImage controls if hyperkube should
                              be used for Kubernetes components instead of their respective
                              separate images
                            type: boolean
                        type: object
                      files:
                        description: Files specifies extra files to be passed to user_data
                          upon creation.
                        items:
                          description: File defines the input for generating write_files
                            in cloud-init.
                          properties:
                            content:
                              description: Content is the actual content of the file.
                              type: string
                            encoding:
                              description: Encoding specifies the encoding of the
                                file contents.
                              enum:
                              - base64
                              - gzip
                              - gzip+base64
                              type: string
                            owner:
                              description: Owner specifies the ownership of the file,
                                e.g. "root:root".
                              type: string
                            path:
                              description: Path specifies the full path on disk where
                                to store the file.
                              type: string
                            permissions:
                              description: Permissions specifies the permissions to
                                assign to the file, e.g. "0640".
                              type: string
                          required:
                          - content
                          - path
                          type: object
                        type: array
                      format:
                        description: Format specifies the output format of the bootstrap
                          data
                        enum:
                        - cloud-config
                        type: string
                      initConfiguration:
                        description: InitConfiguration along with ClusterConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          bootstrapTokens:
                            description: BootstrapTokens is respected at `kubeadm
                              init` time and describes a set of Bootstrap Tokens to
                              create. This information IS NOT uploaded to the kubeadm
                              cluster configmap, partly because of its sensitive nature
                            items:
                              description: BootstrapToken describes one bootstrap
                                token, stored as a Secret in the cluster
                              properties:
                                description:
                                  description: Description sets a human-friendly message
                                    why this token exists and what it's used for,
                                    so other administrators can know its purpose.
                                  type: string
                                expires:
                                  description: Expires specifies the timestamp when
                                    this token expires. Defaults to being set dynamically
                                    at runtime based on the TTL. Expires and TTL are
                                    mutually exclusive.
                                  format: date-time
                                  type: string
                                groups:
                                  description: Groups specifies the extra groups that
                                    this token will authenticate as when/if used for
                                    authentication
                                  items:
                                    type: string
                                  type: array
                                token:
                                  description: Token is used for establishing bidirectional
                                    trust between nodes and control-planes. Used for
                                    joining nodes in the cluster.
                                  type: object
                                ttl:
                                  description: TTL defines the time to live for this
                                    token. Defaults to 24h. Expires and TTL are mutually
                                    exclusive.
                                  type: string
                                usages:
                                  description: Usages describes the ways in which
                                    this token can be used. Can by default be used
                                    for establishing bidirectional trust, but that
                                    can be changed here.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - token
                              type: object
                            type: array
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance that's deployed on this control
                              plane node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                              in the sense that ControlPlaneEndpoint is the global
                              endpoint for the cluster, which then loadbalances the
                              requests to each individual API server. This configuration
                              object lets you customize what IP/DNS name and port
                              the local API server advertises it's accessible on.
                              By default, kubeadm tries to auto-detect the IP of the
                              default interface and use that, but in case that process
                              fails you may set the desired value here.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            required:
                            - advertiseAddress
                            - bindPort
                            type: object
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: Required. The taint value corresponding
                                        to the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      joinConfiguration:
                        description: JoinConfiguration is the kubeadm configuration
                          for the join command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          caCertPath:
                            description: 'CACertPath is the path to the SSL certificate
                              authority used to secure comunications between node
                              and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                              TODO: revisit when there is defaulting from k/k'
                            type: string
                          controlPlane:
                            description: ControlPlane defines the additional control
                              plane instance to be deployed on the joining node. If
                              nil, no additional control plane instance will be deployed.
                            properties:
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance to be deployed on this
                                  node.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                required:
                                - advertiseAddress
                                - bindPort
                                type: object
                            type: object
                          discovery:
                            description: 'Discovery specifies the options for the
                              kubelet to use during the TLS Bootstrap process TODO:
                              revisit when there is defaulting from k/k'
                            properties:
                              bootstrapToken:
                                description: BootstrapToken is used to set the options
                                  for bootstrap token based discovery BootstrapToken
                                  and File are mutually exclusive
                                properties:
                                  apiServerEndpoint:
                                    description: APIServerEndpoint is an IP or domain
                                      name to the API server from which info will
                                      be fetched.
                                    type: string
                                  caCertHashes:
                                    description: 'CACertHashes specifies a set of
                                      public key pins to verify when token-based discovery
                                      is used. The root CA found during discovery
                                      must match one of these values. Specifying an
                                      empty set disables root CA pinning, which can
                                      be unsafe. Each hash is specified as "<type>:<value>",
                                      where the only currently supported type is "sha256".
                                      This is a hex-encoded SHA-256 hash of the Subject
                                      Public Key Info (SPKI) object in DER-encoded
                                      ASN.1. These hashes can be calculated using,
                                      for example, OpenSSL: openssl x509 -pubkey -in
                                      ca.crt openssl rsa -pubin -outform der 2>&/dev/null
                                      | openssl dgst -sha256 -hex'
                                    items:
                                      type: string
                                    type: array
                                  token:
                                    description: Token is a token used to validate
                                      cluster information fetched from the control-plane.
                                    type: string
                                  unsafeSkipCAVerification:
                                    description: UnsafeSkipCAVerification allows token-based
                                      discovery without CA verification via CACertHashes.
                                      This can weaken the security of kubeadm since
                                      other nodes can impersonate the control-plane.
                                    type: boolean
                                required:
                                - token
                                - unsafeSkipCAVerification
                                type: object
                              file:
                                description: File is used to specify a file or URL
                                  to a kubeconfig file from which to load cluster
                                  information BootstrapToken and File are mutually
                                  exclusive
                                properties:
                                  kubeConfigPath:
                                    description: KubeConfigPath is used to specify
                                      the actual file path or URL to the kubeconfig
                                      file from which to load cluster information
                                    type: string
                                required:
                                - kubeConfigPath
                                type: object
                              timeout:
                                description: Timeout modifies the discovery timeout
                                type: string
                              tlsBootstrapToken:
                                description: 'TLSBootstrapToken is a token used for
                                  TLS bootstrapping. If .BootstrapToken is set, this
                                  field is defaulted to .BootstrapToken.Token, but
                                  can be overridden. If .File is set, this field **must
                                  be set** in case the KubeConfigFile does not contain
                                  any other authentication information TODO: revisit
                                  when there is defaulting from k/k'
                                type: string
                            type: object
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: Required. The taint value corresponding
                                        to the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      ntp:
                        description: NTP specifies NTP configuration
                        properties:
                          enabled:
                            description: Enabled specifies whether NTP should be enabled
                            type: boolean
                          servers:
                            description: Servers specifies which NTP servers to use
                            items:
                              type: string
                            type: array
                        type: object
                      postKubeadmCommands:
                        description: PostKubeadmCommands specifies extra commands
                          to run after kubeadm runs
                        items:
                          type: string
                        type: array
                      preKubeadmCommands:
                        description: PreKubeadmCommands specifies extra commands to
                          run before kubeadm runs
                        items:
                          type: string
                        type: array
                      users:
                        description: Users specifies extra users to add
                        items:
                          description: User defines the input for a generated user
                            in cloud-init.
                          properties:
                            gecos:
                              description: Gecos specifies the gecos to use for the
                                user
                              type: string
                            groups:
                              description: Groups specifies the additional groups
                                for the user
                              type: string
                            homeDir:
                              description: HomeDir specifies the home directory to
                                use for the user
                              type: string
                            inactive:
                              description: Inactive specifies whether to mark the
                                user as inactive
                              type: boolean
                            lockPassword:
                              description: LockPassword specifies if password login
                                should be disabled
                              type: boolean
                            name:
                              description: Name specifies the user name
                              type: string
                            passwd:
                              description: Passwd specifies a hashed password for
                                the user
                              type: string
                            primaryGroup:
                              description: PrimaryGroup specifies the primary group
                                for the user
                              type: string
                            shell:
                              description: Shell specifies the user's shell
                              type: string
                            sshAuthorizedKeys:
                              description: SSHAuthorizedKeys specifies a list of ssh
                                authorized keys for the user
                              items:
                                type: string
                              type: array
                            sudo:
                              description: Sudo specifies a sudo role for the user
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                    type: object
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: false
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: KubeadmConfigTemplate is the Schema for the kubeadmconfigtemplates
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmConfigTemplateSpec defines the desired state of KubeadmConfigTemplate
            properties:
              template:
                description: KubeadmConfigTemplateResource defines the Template structure
                properties:
                  spec:
                    description: KubeadmConfigSpec defines the desired state of KubeadmConfig.
                      Either ClusterConfiguration and InitConfiguration should be
                      defined or the JoinConfiguration should be defined.
                    properties:
                      clusterConfiguration:
                        description: ClusterConfiguration along with InitConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiServer:
                            description: APIServer contains extra settings for the
                              API server control plane component
                            properties:
                              certSANs:
                                description: CertSANs sets extra Subject Alternative
                                  Names for the API Server signing cert.
                                items:
                                  type: string
                                type: array
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                              timeoutForControlPlane:
                                description: TimeoutForControlPlane controls the timeout
                                  that we use for API server to appear
                                type: string
                            type: object
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          certificatesDir:
                            description: 'CertificatesDir specifies where to store
                              or look for all required certificates. NB: if not provided,
                              this will default to `/etc/kubernetes/pki`'
                            type: string
                          clusterName:
                            description: The cluster name
                            type: string
                          controlPlaneEndpoint:
                            description: 'ControlPlaneEndpoint sets a stable IP address
                              or DNS name for the control plane; it can be a valid
                              IP address or a RFC-1123 DNS subdomain, both with optional
                              TCP port. In case the ControlPlaneEndpoint is not specified,
                              the AdvertiseAddress + BindPort are used; in case the
                              ControlPlaneEndpoint is specified but without a TCP
                              port, the BindPort is used. Possible usages are: e.g.
                              In a cluster with more than one control plane instances,
                              this field should be assigned the address of the external
                              load balancer in front of the control plane instances.
                              e.g.  in environments with enforced node recycling,
                              the ControlPlaneEndpoint could be used for assigning
                              a stable DNS to the control plane. NB: This value defaults
                              to the first value in the Cluster object status.apiEndpoints
                              array.'
                            type: string
                          controllerManager:
                            description: ControllerManager contains extra settings
                              for the controller manager control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          dns:
                            description: DNS defines the options for the DNS add-on
                              installed in the cluster.
                            properties:
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              type:
                                description: Type defines the DNS add-on to be used
                                type: string
                            type: object
                          etcd:
                            description: 'Etcd holds configuration for etcd. NB: This
                              value defaults to a Local (stacked) etcd'
                            properties:
                              external:
                                description: External describes how to connect to
                                  an external etcd cluster Local and External are
                                  mutually exclusive
                                properties:
                                  caFile:
                                    description: CAFile is an SSL Certificate Authority
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  certFile:
                                    description: CertFile is an SSL certification
                                      file used to secure etcd communication. Required
                                      if using a TLS connection.
                                    type: string
                                  endpoints:
                                    description: Endpoints of etcd members. Required
                                      for ExternalEtcd.
                                    items:
                                      type: string
                                    type: array
                                  keyFile:
                                    description: KeyFile is an SSL key file used to
                                      secure etcd communication. Required if using
                                      a TLS connection.
                                    type: string
                                required:
                                - caFile
                                - certFile
                                - endpoints
                                - keyFile
                                type: object
                              local:
                                description: Local provides configuration knobs for
                                  configuring the local etcd instance Local and External
                                  are mutually exclusive
                                properties:
                                  dataDir:
                                    description: DataDir is the directory etcd will
                                      place its data. Defaults to "/var/lib/etcd".
                                    type: string
                                  extraArgs:
                                    additionalProperties:
                                      type: string
                                    description: ExtraArgs are extra arguments provided
                                      to the etcd binary when run inside a static
                                      pod.
                                    type: object
                                  imageRepository:
                                    description: ImageRepository sets the container
                                      registry to pull images from. if not set, the
                                      ImageRepository defined in ClusterConfiguration
                                      will be used instead.
                                    type: string
                                  imageTag:
                                    description: ImageTag allows to specify a tag
                                      for the image. In case this value is set, kubeadm
                                      does not change automatically the version of
                                      the above components during upgrades.
                                    type: string
                                  peerCertSANs:
                                    description: PeerCertSANs sets extra Subject Alternative
                                      Names for the etcd peer signing cert.
                                    items:
                                      type: string
                                    type: array
                                  serverCertSANs:
                                    description: ServerCertSANs sets extra Subject
                                      Alternative Names for the etcd server signing
                                      cert.
                                    items:
                                      type: string
                                    type: array
                                type: object
                            type: object
                          featureGates:
                            additionalProperties:
                              type: boolean
                            description: FeatureGates enabled by the user.
                            type: object
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. If empty, `k8s.gcr.io` will be
                              used by default; in case of kubernetes version is a
                              CI build (kubernetes version starts with `ci/` or `ci-cross/`)
                              `gcr.io/k8s-staging-ci-images` will be used as a default
                              for control plane components and for kube-proxy, while
                              `k8s.gcr.io` will be used for all the other images.
                            type: string
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          kubernetesVersion:
                            description: 'KubernetesVersion is the target version
                              of the control plane. NB: This value defaults to the
                              Machine object spec.version'
                            type: string
                          networking:
                            description: 'Networking holds configuration for the networking
                              topology of the cluster. NB: This value defaults to
                              the Cluster object spec.clusterNetwork.'
                            properties:
                              dnsDomain:
                                description: DNSDomain is the dns domain used by k8s
                                  services. Defaults to "cluster.local".
                                type: string
                              podSubnet:
                                description: PodSubnet is the subnet used by pods.
                                  If unset, the API server will not allocate CIDR
                                  ranges for every node. Defaults to a comma-delimited
                                  string of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                                  if that is set
                                type: string
                              serviceSubnet:
                                description: ServiceSubnet is the subnet used by k8s
                                  services. Defaults to a comma-delimited string of
                                  the Cluster object's spec.clusterNetwork.pods.cidrBlocks,
                                  or to "10.96.0.0/12" if that's unset.
                                type: string
                            type: object
                          scheduler:
                            description: Scheduler contains extra settings for the
                              scheduler control plane component
                            properties:
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: 'ExtraArgs is an extra set of flags to
                                  pass to the control plane component. TODO: This
                                  is temporary and ideally we would like to switch
                                  all components to use ComponentConfig + ConfigMaps.'
                                type: object
                              extraVolumes:
                                description: ExtraVolumes is an extra set of host
                                  volumes, mounted to the control plane component.
                                items:
                                  description: HostPathMount contains elements describing
                                    volumes that are mounted from the host.
                                  properties:
                                    hostPath:
                                      description: HostPath is the path in the host
                                        that will be mounted inside the pod.
                                      type: string
                                    mountPath:
                                      description: MountPath is the path inside the
                                        pod where hostPath will be mounted.
                                      type: string
                                    name:
                                      description: Name of the volume inside the pod
                                        template.
                                      type: string
                                    pathType:
                                      description: PathType is the type of the HostPath.
                                      type: string
                                    readOnly:
                                      description: ReadOnly controls write access
                                        to the volume
                                      type: boolean
                                  required:
                                  - hostPath
                                  - mountPath
                                  - name
                                  type: object
                                type: array
                            type: object
                          useHyperKubeImage:
                            description: UseHyperKubeImage controls if hyperkube should
                              be used for Kubernetes components instead of their respective
                              separate images
                            type: boolean
                        type: object
                      diskSetup:
                        description: DiskSetup specifies options for the creation
                          of partition tables and file systems on devices.
                        properties:
                          filesystems:
                            description: Filesystems specifies the list of file systems
                              to setup.
                            items:
                              description: Filesystem defines the file systems to
                                be created.
                              properties:
                                device:
                                  description: Device specifies the device name
                                  type: string
                                extraOpts:
                                  description: ExtraOpts defined extra options to
                                    add to the command for creating the file system.
                                  items:
                                    type: string
                                  type: array
                                filesystem:
                                  description: Filesystem specifies the file system
                                    type.
                                  type: string
                                label:
                                  description: Label specifies the file system label
                                    to be used. If set to None, no label is used.
                                  type: string
                                overwrite:
                                  description: Overwrite defines whether or not to
                                    overwrite any existing filesystem. If true, any
                                    pre-existing file system will be destroyed. Use
                                    with Caution.
                                  type: boolean
                                partition:
                                  description: 'Partition specifies the partition
                                    to use. The valid options are: "auto|any", "auto",
                                    "any", "none", and <NUM>, where NUM is the actual
                                    partition number.'
                                  type: string
                                replaceFS:
                                  description: 'ReplaceFS is a special directive,
                                    used for Microsoft Azure that instructs cloud-init
                                    to replace a file system of <FS_TYPE>. NOTE: unless
                                    you define a label, this requires the use of the
                                    ''any'' partition directive.'
                                  type: string
                              required:
                              - device
                              - filesystem
                              - label
                              type: object
                            type: array
                          partitions:
                            description: Partitions specifies the list of the partitions
                              to setup.
                            items:
                              description: Partition defines how to create and layout
                                a partition.
                              properties:
                                device:
                                  description: Device is the name of the device.
                                  type: string
                                layout:
                                  description: Layout specifies the device layout.
                                    If it is true, a single partition will be created
                                    for the entire device. When layout is false, it
                                    means don't partition or ignore existing partitioning.
                                  type: boolean
                                overwrite:
                                  description: Overwrite describes whether to skip
                                    checks and create the partition if a partition
                                    or filesystem is found on the device. Use with
                                    caution. Default is 'false'.
                                  type: boolean
                                tableType:
                                  description: 'TableType specifies the tupe of partition
                                    table. The following are supported: ''mbr'': default
                                    and setups a MS-DOS partition table ''gpt'': setups
                                    a GPT partition table'
                                  type: string
                              required:
                              - device
                              - layout
                              type: object
                            type: array
                        type: object
                      files:
                        description: Files specifies extra files to be passed to user_data
                          upon creation.
                        items:
                          description: File defines the input for generating write_files
                            in cloud-init.
                          properties:
                            content:
                              description: Content is the actual content of the file.
                              type: string
                            contentFrom:
                              description: ContentFrom is a referenced source of content
                                to populate the file.
                              properties:
                                secret:
                                  description: Secret represents a secret that should
                                    populate this file.
                                  properties:
                                    key:
                                      description: Key is the key in the secret's
                                        data map for this value.
                                      type: string
                                    name:
                                      description: Name of the secret in the KubeadmBootstrapConfig's
                                        namespace to use.
                                      type: string
                                  required:
                                  - key
                                  - name
                                  type: object
                              required:
                              - secret
                              type: object
                            encoding:
                              description: Encoding specifies the encoding of the
                                file contents.
                              enum:
                              - base64
                              - gzip
                              - gzip+base64
                              type: string
                            owner:
                              description: Owner specifies the ownership of the file,
                                e.g. "root:root".
                              type: string
                            path:
                              description: Path specifies the full path on disk where
                                to store the file.
                              type: string
                            permissions:
                              description: Permissions specifies the permissions to
                                assign to the file, e.g. "0640".
                              type: string
                          required:
                          - path
                          type: object
                        type: array
                      format:
                        description: Format specifies the output format of the bootstrap
                          data
                        enum:
                        - cloud-config
                        type: string
                      initConfiguration:
                        description: InitConfiguration along with ClusterConfiguration
                          are the configurations necessary for the init command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          bootstrapTokens:
                            description: BootstrapTokens is respected at `kubeadm
                              init` time and describes a set of Bootstrap Tokens to
                              create. This information IS NOT uploaded to the kubeadm
                              cluster configmap, partly because of its sensitive nature
                            items:
                              description: BootstrapToken describes one bootstrap
                                token, stored as a Secret in the cluster
                              properties:
                                description:
                                  description: Description sets a human-friendly message
                                    why this token exists and what it's used for,
                                    so other administrators can know its purpose.
                                  type: string
                                expires:
                                  description: Expires specifies the timestamp when
                                    this token expires. Defaults to being set dynamically
                                    at runtime based on the TTL. Expires and TTL are
                                    mutually exclusive.
                                  format: date-time
                                  type: string
                                groups:
                                  description: Groups specifies the extra groups that
                                    this token will authenticate as when/if used for
                                    authentication
                                  items:
                                    type: string
                                  type: array
                                token:
                                  description: Token is used for establishing bidirectional
                                    trust between nodes and control-planes. Used for
                                    joining nodes in the cluster.
                                  type: object
                                ttl:
                                  description: TTL defines the time to live for this
                                    token. Defaults to 24h. Expires and TTL are mutually
                                    exclusive.
                                  type: string
                                usages:
                                  description: Usages describes the ways in which
                                    this token can be used. Can by default be used
                                    for establishing bidirectional trust, but that
                                    can be changed here.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - token
                              type: object
                            type: array
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance that's deployed on this control
                              plane node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                              in the sense that ControlPlaneEndpoint is the global
                              endpoint for the cluster, which then loadbalances the
                              requests to each individual API server. This configuration
                              object lets you customize what IP/DNS name and port
                              the local API server advertises it's accessible on.
                              By default, kubeadm tries to auto-detect the IP of the
                              default interface and use that, but in case that process
                              fails you may set the desired value here.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            required:
                            - advertiseAddress
                            - bindPort
                            type: object
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: Required. The taint value corresponding
                                        to the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      joinConfiguration:
                        description: JoinConfiguration is the kubeadm configuration
                          for the join command
                        properties:
                          apiVersion:
                            description: 'APIVersion defines the versioned schema
                              of this representation of an object. Servers should
                              convert recognized schemas to the latest internal value,
                              and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                            type: string
                          caCertPath:
                            description: 'CACertPath is the path to the SSL certificate
                              authority used to secure comunications between node
                              and control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                              TODO: revisit when there is defaulting from k/k'
                            type: string
                          controlPlane:
                            description: ControlPlane defines the additional control
                              plane instance to be deployed on the joining node. If
                              nil, no additional control plane instance will be deployed.
                            properties:
                              localAPIEndpoint:
                                description: LocalAPIEndpoint represents the endpoint
                                  of the API server instance to be deployed on this
                                  node.
                                properties:
                                  advertiseAddress:
                                    description: AdvertiseAddress sets the IP address
                                      for the API server to advertise.
                                    type: string
                                  bindPort:
                                    description: BindPort sets the secure port for
                                      the API Server to bind to. Defaults to 6443.
                                    format: int32
                                    type: integer
                                required:
                                - advertiseAddress
                                - bindPort
                                type: object
                            type: object
                          discovery:
                            description: 'Discovery specifies the options for the
                              kubelet to use during the TLS Bootstrap process TODO:
                              revisit when there is defaulting from k/k'
                            properties:
                              bootstrapToken:
                                description: BootstrapToken is used to set the options
                                  for bootstrap token based discovery BootstrapToken
                                  and File are mutually exclusive
                                properties:
                                  apiServerEndpoint:
                                    description: APIServerEndpoint is an IP or domain
                                      name to the API server from which info will
                                      be fetched.
                                    type: string
                                  caCertHashes:
                                    description: 'CACertHashes specifies a set of
                                      public key pins to verify when token-based discovery
                                      is used. The root CA found during discovery
                                      must match one of these values. Specifying an
                                      empty set disables root CA pinning, which can
                                      be unsafe. Each hash is specified as "<type>:<value>",
                                      where the only currently supported type is "sha256".
                                      This is a hex-encoded SHA-256 hash of the Subject
                                      Public Key Info (SPKI) object in DER-encoded
                                      ASN.1. These hashes can be calculated using,
                                      for example, OpenSSL: openssl x509 -pubkey -in
                                      ca.crt openssl rsa -pubin -outform der 2>&/dev/null
                                      | openssl dgst -sha256 -hex'
                                    items:
                                      type: string
                                    type: array
                                  token:
                                    description: Token is a token used to validate
                                      cluster information fetched from the control-plane.
                                    type: string
                                  unsafeSkipCAVerification:
                                    description: UnsafeSkipCAVerification allows token-based
                                      discovery without CA verification via CACertHashes.
                                      This can weaken the security of kubeadm since
                                      other nodes can impersonate the control-plane.
                                    type: boolean
                                required:
                                - token
                                - unsafeSkipCAVerification
                                type: object
                              file:
                                description: File is used to specify a file or URL
                                  to a kubeconfig file from which to load cluster
                                  information BootstrapToken and File are mutually
                                  exclusive
                                properties:
                                  kubeConfigPath:
                                    description: KubeConfigPath is used to specify
                                      the actual file path or URL to the kubeconfig
                                      file from which to load cluster information
                                    type: string
                                required:
                                - kubeConfigPath
                                type: object
                              timeout:
                                description: Timeout modifies the discovery timeout
                                type: string
                              tlsBootstrapToken:
                                description: 'TLSBootstrapToken is a token used for
                                  TLS bootstrapping. If .BootstrapToken is set, this
                                  field is defaulted to .BootstrapToken.Token, but
                                  can be overridden. If .File is set, this field **must
                                  be set** in case the KubeConfigFile does not contain
                                  any other authentication information TODO: revisit
                                  when there is defaulting from k/k'
                                type: string
                            type: object
                          kind:
                            description: 'Kind is a string value representing the
                              REST resource this object represents. Servers may infer
                              this from the endpoint the client submits requests to.
                              Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          nodeRegistration:
                            description: NodeRegistration holds fields that relate
                              to registering the new control-plane node to the cluster.
                              When used in the context of control plane nodes, NodeRegistration
                              should remain consistent across both InitConfiguration
                              and JoinConfiguration
                            properties:
                              criSocket:
                                description: CRISocket is used to retrieve container
                                  runtime info. This information will be annotated
                                  to the Node API object, for later re-use
                                type: string
                              kubeletExtraArgs:
                                additionalProperties:
                                  type: string
                                description: KubeletExtraArgs passes through extra
                                  arguments to the kubelet. The arguments here are
                                  passed to the kubelet command line via the environment
                                  file kubeadm writes at runtime for the kubelet to
                                  source. This overrides the generic base-level configuration
                                  in the kubelet-config-1.X ConfigMap Flags have higher
                                  priority when parsing. These values are local and
                                  specific to the node kubeadm is executing on.
                                type: object
                              name:
                                description: Name is the `.Metadata.Name` field of
                                  the Node API object that will be created in this
                                  `kubeadm init` or `kubeadm join` operation. This
                                  field is also used in the CommonName field of the
                                  kubelet's client certificate to the API server.
                                  Defaults to the hostname of the node if not provided.
                                type: string
                              taints:
                                description: 'Taints specifies the taints the Node
                                  API object should be registered with. If this field
                                  is unset, i.e. nil, in the `kubeadm init` process
                                  it will be defaulted to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                                  If you don''t want to taint your control-plane node,
                                  set this field to an empty slice, i.e. `taints:
                                  {}` in the YAML file. This field is solely used
                                  for Node registration.'
                                items:
                                  description: The node this Taint is attached to
                                    has the "effect" on any pod that does not tolerate
                                    the Taint.
                                  properties:
                                    effect:
                                      description: Required. The effect of the taint
                                        on pods that do not tolerate the taint. Valid
                                        effects are NoSchedule, PreferNoSchedule and
                                        NoExecute.
                                      type: string
                                    key:
                                      description: Required. The taint key to be applied
                                        to a node.
                                      type: string
                                    timeAdded:
                                      description: TimeAdded represents the time at
                                        which the taint was added. It is only written
                                        for NoExecute taints.
                                      format: date-time
                                      type: string
                                    value:
                                      description: Required. The taint value corresponding
                                        to the taint key.
                                      type: string
                                  required:
                                  - effect
                                  - key
                                  type: object
                                type: array
                            type: object
                        type: object
                      mounts:
                        description: Mounts specifies a list of mount points to be
                          setup.
                        items:
                          description: MountPoints defines input for generated mounts
                            in cloud-init.
                          items:
                            type: string
                          type: array
                        type: array
                      ntp:
                        description: NTP specifies NTP configuration
                        properties:
                          enabled:
                            description: Enabled specifies whether NTP should be enabled
                            type: boolean
                          servers:
                            description: Servers specifies which NTP servers to use
                            items:
                              type: string
                            type: array
                        type: object
                      postKubeadmCommands:
                        description: PostKubeadmCommands specifies extra commands
                          to run after kubeadm runs
                        items:
                          type: string
                        type: array
                      preKubeadmCommands:
                        description: PreKubeadmCommands specifies extra commands to
                          run before kubeadm runs
                        items:
                          type: string
                        type: array
                      useExperimentalRetryJoin:
                        description: "UseExperimentalRetryJoin replaces a basic kubeadm
                          command with a shell script with retries for joins. \n This
                          is meant to be an experimental temporary workaround on some
                          environments where joins fail due to timing (and other issues).
                          The long term goal is to add retries to kubeadm proper and
                          use that functionality. \n This will add about 40KB to userdata
                          \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                        type: boolean
                      users:
                        description: Users specifies extra users to add
                        items:
                          description: User defines the input for a generated user
                            in cloud-init.
                          properties:
                            gecos:
                              description: Gecos specifies the gecos to use for the
                                user
                              type: string
                            groups:
                              description: Groups specifies the additional groups
                                for the user
                              type: string
                            homeDir:
                              description: HomeDir specifies the home directory to
                                use for the user
                              type: string
                            inactive:
                              description: Inactive specifies whether to mark the
                                user as inactive
                              type: boolean
                            lockPassword:
                              description: LockPassword specifies if password login
                                should be disabled
                              type: boolean
                            name:
                              description: Name specifies the user name
                              type: string
                            passwd:
                              description: Passwd specifies a hashed password for
                                the user
                              type: string
                            primaryGroup:
                              description: PrimaryGroup specifies the primary group
                                for the user
                              type: string
                            shell:
                              description: Shell specifies the user's shell
                              type: string
                            sshAuthorizedKeys:
                              description: SSHAuthorizedKeys specifies a list of ssh
                                authorized keys for the user
                              items:
                                type: string
                              type: array
                            sudo:
                              description: Sudo specifies a sudo role for the user
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                      verbosity:
                        description: Verbosity is the number for the kubeadm log level
                          verbosity. It overrides the `--v` flag in kubeadm commands.
                        format: int32
                        type: integer
                    type: object
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capi-kubeadm-control-plane-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.9
  labels:
    cluster.x-k8s.io/provider: control-plane-kubeadm
    cluster.x-k8s.io/v1alpha3: v1alpha3
  name: kubeadmcontrolplanes.controlplane.cluster.x-k8s.io
spec:
  group: controlplane.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: KubeadmControlPlane
    listKind: KubeadmControlPlaneList
    plural: kubeadmcontrolplanes
    shortNames:
    - kcp
    singular: kubeadmcontrolplane
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: This denotes whether or not the control plane has the uploaded
        kubeadm-config configmap
      jsonPath: .status.initialized
      name: Initialized
      type: boolean
    - description: KubeadmControlPlane API Server is ready to receive requests
      jsonPath: .status.ready
      name: API Server Available
      type: boolean
    - description: Kubernetes version associated with this control plane
      jsonPath: .spec.version
      name: Version
      type: string
    - description: Total number of non-terminated machines targeted by this control
        plane
      jsonPath: .status.replicas
      name: Replicas
      type: integer
    - description: Total number of fully running and ready control plane machines
      jsonPath: .status.readyReplicas
      name: Ready
      type: integer
    - description: Total number of non-terminated machines targeted by this control
        plane that have the desired template spec
      jsonPath: .status.updatedReplicas
      name: Updated
      type: integer
    - description: Total number of unavailable machines targeted by this control plane
      jsonPath: .status.unavailableReplicas
      name: Unavailable
      type: integer
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: KubeadmControlPlane is the Schema for the KubeadmControlPlane
          API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KubeadmControlPlaneSpec defines the desired state of KubeadmControlPlane.
            properties:
              infrastructureTemplate:
                description: InfrastructureTemplate is a required reference to a custom
                  resource offered by an infrastructure provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              kubeadmConfigSpec:
                description: KubeadmConfigSpec is a KubeadmConfigSpec to use for initializing
                  and joining machines to the control plane.
                properties:
                  clusterConfiguration:
                    description: ClusterConfiguration along with InitConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiServer:
                        description: APIServer contains extra settings for the API
                          server control plane component
                        properties:
                          certSANs:
                            description: CertSANs sets extra Subject Alternative Names
                              for the API Server signing cert.
                            items:
                              type: string
                            type: array
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                          timeoutForControlPlane:
                            description: TimeoutForControlPlane controls the timeout
                              that we use for API server to appear
                            type: string
                        type: object
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      certificatesDir:
                        description: 'CertificatesDir specifies where to store or
                          look for all required certificates. NB: if not provided,
                          this will default to `/etc/kubernetes/pki`'
                        type: string
                      clusterName:
                        description: The cluster name
                        type: string
                      controlPlaneEndpoint:
                        description: 'ControlPlaneEndpoint sets a stable IP address
                          or DNS name for the control plane; it can be a valid IP
                          address or a RFC-1123 DNS subdomain, both with optional
                          TCP port. In case the ControlPlaneEndpoint is not specified,
                          the AdvertiseAddress + BindPort are used; in case the ControlPlaneEndpoint
                          is specified but without a TCP port, the BindPort is used.
                          Possible usages are: e.g. In a cluster with more than one
                          control plane instances, this field should be assigned the
                          address of the external load balancer in front of the control
                          plane instances. e.g.  in environments with enforced node
                          recycling, the ControlPlaneEndpoint could be used for assigning
                          a stable DNS to the control plane. NB: This value defaults
                          to the first value in the Cluster object status.apiEndpoints
                          array.'
                        type: string
                      controllerManager:
                        description: ControllerManager contains extra settings for
                          the controller manager control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                      dns:
                        description: DNS defines the options for the DNS add-on installed
                          in the cluster.
                        properties:
                          imageRepository:
                            description: ImageRepository sets the container registry
                              to pull images from. if not set, the ImageRepository
                              defined in ClusterConfiguration will be used instead.
                            type: string
                          imageTag:
                            description: ImageTag allows to specify a tag for the
                              image. In case this value is set, kubeadm does not change
                              automatically the version of the above components during
                              upgrades.
                            type: string
                          type:
                            description: Type defines the DNS add-on to be used
                            type: string
                        type: object
                      etcd:
                        description: 'Etcd holds configuration for etcd. NB: This
                          value defaults to a Local (stacked) etcd'
                        properties:
                          external:
                            description: External describes how to connect to an external
                              etcd cluster Local and External are mutually exclusive
                            properties:
                              caFile:
                                description: CAFile is an SSL Certificate Authority
                                  file used to secure etcd communication. Required
                                  if using a TLS connection.
                                type: string
                              certFile:
                                description: CertFile is an SSL certification file
                                  used to secure etcd communication. Required if using
                                  a TLS connection.
                                type: string
                              endpoints:
                                description: Endpoints of etcd members. Required for
                                  ExternalEtcd.
                                items:
                                  type: string
                                type: array
                              keyFile:
                                description: KeyFile is an SSL key file used to secure
                                  etcd communication. Required if using a TLS connection.
                                type: string
                            required:
                            - caFile
                            - certFile
                            - endpoints
                            - keyFile
                            type: object
                          local:
                            description: Local provides configuration knobs for configuring
                              the local etcd instance Local and External are mutually
                              exclusive
                            properties:
                              dataDir:
                                description: DataDir is the directory etcd will place
                                  its data. Defaults to "/var/lib/etcd".
                                type: string
                              extraArgs:
                                additionalProperties:
                                  type: string
                                description: ExtraArgs are extra arguments provided
                                  to the etcd binary when run inside a static pod.
                                type: object
                              imageRepository:
                                description: ImageRepository sets the container registry
                                  to pull images from. if not set, the ImageRepository
                                  defined in ClusterConfiguration will be used instead.
                                type: string
                              imageTag:
                                description: ImageTag allows to specify a tag for
                                  the image. In case this value is set, kubeadm does
                                  not change automatically the version of the above
                                  components during upgrades.
                                type: string
                              peerCertSANs:
                                description: PeerCertSANs sets extra Subject Alternative
                                  Names for the etcd peer signing cert.
                                items:
                                  type: string
                                type: array
                              serverCertSANs:
                                description: ServerCertSANs sets extra Subject Alternative
                                  Names for the etcd server signing cert.
                                items:
                                  type: string
                                type: array
                            type: object
                        type: object
                      featureGates:
                        additionalProperties:
                          type: boolean
                        description: FeatureGates enabled by the user.
                        type: object
                      imageRepository:
                        description: ImageRepository sets the container registry to
                          pull images from. If empty, `k8s.gcr.io` will be used by
                          default; in case of kubernetes version is a CI build (kubernetes
                          version starts with `ci/` or `ci-cross/`) `gcr.io/k8s-staging-ci-images`
                          will be used as a default for control plane components and
                          for kube-proxy, while `k8s.gcr.io` will be used for all
                          the other images.
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      kubernetesVersion:
                        description: 'KubernetesVersion is the target version of the
                          control plane. NB: This value defaults to the Machine object
                          spec.version'
                        type: string
                      networking:
                        description: 'Networking holds configuration for the networking
                          topology of the cluster. NB: This value defaults to the
                          Cluster object spec.clusterNetwork.'
                        properties:
                          dnsDomain:
                            description: DNSDomain is the dns domain used by k8s services.
                              Defaults to "cluster.local".
                            type: string
                          podSubnet:
                            description: PodSubnet is the subnet used by pods. If
                              unset, the API server will not allocate CIDR ranges
                              for every node. Defaults to a comma-delimited string
                              of the Cluster object's spec.clusterNetwork.services.cidrBlocks
                              if that is set
                            type: string
                          serviceSubnet:
                            description: ServiceSubnet is the subnet used by k8s services.
                              Defaults to a comma-delimited string of the Cluster
                              object's spec.clusterNetwork.pods.cidrBlocks, or to
                              "10.96.0.0/12" if that's unset.
                            type: string
                        type: object
                      scheduler:
                        description: Scheduler contains extra settings for the scheduler
                          control plane component
                        properties:
                          extraArgs:
                            additionalProperties:
                              type: string
                            description: 'ExtraArgs is an extra set of flags to pass
                              to the control plane component. TODO: This is temporary
                              and ideally we would like to switch all components to
                              use ComponentConfig + ConfigMaps.'
                            type: object
                          extraVolumes:
                            description: ExtraVolumes is an extra set of host volumes,
                              mounted to the control plane component.
                            items:
                              description: HostPathMount contains elements describing
                                volumes that are mounted from the host.
                              properties:
                                hostPath:
                                  description: HostPath is the path in the host that
                                    will be mounted inside the pod.
                                  type: string
                                mountPath:
                                  description: MountPath is the path inside the pod
                                    where hostPath will be mounted.
                                  type: string
                                name:
                                  description: Name of the volume inside the pod template.
                                  type: string
                                pathType:
                                  description: PathType is the type of the HostPath.
                                  type: string
                                readOnly:
                                  description: ReadOnly controls write access to the
                                    volume
                                  type: boolean
                              required:
                              - hostPath
                              - mountPath
                              - name
                              type: object
                            type: array
                        type: object
                      useHyperKubeImage:
                        description: UseHyperKubeImage controls if hyperkube should
                          be used for Kubernetes components instead of their respective
                          separate images
                        type: boolean
                    type: object
                  diskSetup:
                    description: DiskSetup specifies options for the creation of partition
                      tables and file systems on devices.
                    properties:
                      filesystems:
                        description: Filesystems specifies the list of file systems
                          to setup.
                        items:
                          description: Filesystem defines the file systems to be created.
                          properties:
                            device:
                              description: Device specifies the device name
                              type: string
                            extraOpts:
                              description: ExtraOpts defined extra options to add
                                to the command for creating the file system.
                              items:
                                type: string
                              type: array
                            filesystem:
                              description: Filesystem specifies the file system type.
                              type: string
                            label:
                              description: Label specifies the file system label to
                                be used. If set to None, no label is used.
                              type: string
                            overwrite:
                              description: Overwrite defines whether or not to overwrite
                                any existing filesystem. If true, any pre-existing
                                file system will be destroyed. Use with Caution.
                              type: boolean
                            partition:
                              description: 'Partition specifies the partition to use.
                                The valid options are: "auto|any", "auto", "any",
                                "none", and <NUM>, where NUM is the actual partition
                                number.'
                              type: string
                            replaceFS:
                              description: 'ReplaceFS is a special directive, used
                                for Microsoft Azure that instructs cloud-init to replace
                                a file system of <FS_TYPE>. NOTE: unless you define
                                a label, this requires the use of the ''any'' partition
                                directive.'
                              type: string
                          required:
                          - device
                          - filesystem
                          - label
                          type: object
                        type: array
                      partitions:
                        description: Partitions specifies the list of the partitions
                          to setup.
                        items:
                          description: Partition defines how to create and layout
                            a partition.
                          properties:
                            device:
                              description: Device is the name of the device.
                              type: string
                            layout:
                              description: Layout specifies the device layout. If
                                it is true, a single partition will be created for
                                the entire device. When layout is false, it means
                                don't partition or ignore existing partitioning.
                              type: boolean
                            overwrite:
                              description: Overwrite describes whether to skip checks
                                and create the partition if a partition or filesystem
                                is found on the device. Use with caution. Default
                                is 'false'.
                              type: boolean
                            tableType:
                              description: 'TableType specifies the tupe of partition
                                table. The following are supported: ''mbr'': default
                                and setups a MS-DOS partition table ''gpt'': setups
                                a GPT partition table'
                              type: string
                          required:
                          - device
                          - layout
                          type: object
                        type: array
                    type: object
                  files:
                    description: Files specifies extra files to be passed to user_data
                      upon creation.
                    items:
                      description: File defines the input for generating write_files
                        in cloud-init.
                      properties:
                        content:
                          description: Content is the actual content of the file.
                          type: string
                        contentFrom:
                          description: ContentFrom is a referenced source of content
                            to populate the file.
                          properties:
                            secret:
                              description: Secret represents a secret that should
                                populate this file.
                              properties:
                                key:
                                  description: Key is the key in the secret's data
                                    map for this value.
                                  type: string
                                name:
                                  description: Name of the secret in the KubeadmBootstrapConfig's
                                    namespace to use.
                                  type: string
                              required:
                              - key
                              - name
                              type: object
                          required:
                          - secret
                          type: object
                        encoding:
                          description: Encoding specifies the encoding of the file
                            contents.
                          enum:
                          - base64
                          - gzip
                          - gzip+base64
                          type: string
                        owner:
                          description: Owner specifies the ownership of the file,
                            e.g. "root:root".
                          type: string
                        path:
                          description: Path specifies the full path on disk where
                            to store the file.
                          type: string
                        permissions:
                          description: Permissions specifies the permissions to assign
                            to the file, e.g. "0640".
                          type: string
                      required:
                      - path
                      type: object
                    type: array
                  format:
                    description: Format specifies the output format of the bootstrap
                      data
                    enum:
                    - cloud-config
                    type: string
                  initConfiguration:
                    description: InitConfiguration along with ClusterConfiguration
                      are the configurations necessary for the init command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      bootstrapTokens:
                        description: BootstrapTokens is respected at `kubeadm init`
                          time and describes a set of Bootstrap Tokens to create.
                          This information IS NOT uploaded to the kubeadm cluster
                          configmap, partly because of its sensitive nature
                        items:
                          description: BootstrapToken describes one bootstrap token,
                            stored as a Secret in the cluster
                          properties:
                            description:
                              description: Description sets a human-friendly message
                                why this token exists and what it's used for, so other
                                administrators can know its purpose.
                              type: string
                            expires:
                              description: Expires specifies the timestamp when this
                                token expires. Defaults to being set dynamically at
                                runtime based on the TTL. Expires and TTL are mutually
                                exclusive.
                              format: date-time
                              type: string
                            groups:
                              description: Groups specifies the extra groups that
                                this token will authenticate as when/if used for authentication
                              items:
                                type: string
                              type: array
                            token:
                              description: Token is used for establishing bidirectional
                                trust between nodes and control-planes. Used for joining
                                nodes in the cluster.
                              type: object
                            ttl:
                              description: TTL defines the time to live for this token.
                                Defaults to 24h. Expires and TTL are mutually exclusive.
                              type: string
                            usages:
                              description: Usages describes the ways in which this
                                token can be used. Can by default be used for establishing
                                bidirectional trust, but that can be changed here.
                              items:
                                type: string
                              type: array
                          required:
                          - token
                          type: object
                        type: array
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      localAPIEndpoint:
                        description: LocalAPIEndpoint represents the endpoint of the
                          API server instance that's deployed on this control plane
                          node In HA setups, this differs from ClusterConfiguration.ControlPlaneEndpoint
                          in the sense that ControlPlaneEndpoint is the global endpoint
                          for the cluster, which then loadbalances the requests to
                          each individual API server. This configuration object lets
                          you customize what IP/DNS name and port the local API server
                          advertises it's accessible on. By default, kubeadm tries
                          to auto-detect the IP of the default interface and use that,
                          but in case that process fails you may set the desired value
                          here.
                        properties:
                          advertiseAddress:
                            description: AdvertiseAddress sets the IP address for
                              the API server to advertise.
                            type: string
                          bindPort:
                            description: BindPort sets the secure port for the API
                              Server to bind to. Defaults to 6443.
                            format: int32
                            type: integer
                        required:
                        - advertiseAddress
                        - bindPort
                        type: object
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster. When
                          used in the context of control plane nodes, NodeRegistration
                          should remain consistent across both InitConfiguration and
                          JoinConfiguration
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: {}`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: Required. The taint value corresponding
                                    to the taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                    type: object
                  joinConfiguration:
                    description: JoinConfiguration is the kubeadm configuration for
                      the join command
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      caCertPath:
                        description: 'CACertPath is the path to the SSL certificate
                          authority used to secure comunications between node and
                          control-plane. Defaults to "/etc/kubernetes/pki/ca.crt".
                          TODO: revisit when there is defaulting from k/k'
                        type: string
                      controlPlane:
                        description: ControlPlane defines the additional control plane
                          instance to be deployed on the joining node. If nil, no
                          additional control plane instance will be deployed.
                        properties:
                          localAPIEndpoint:
                            description: LocalAPIEndpoint represents the endpoint
                              of the API server instance to be deployed on this node.
                            properties:
                              advertiseAddress:
                                description: AdvertiseAddress sets the IP address
                                  for the API server to advertise.
                                type: string
                              bindPort:
                                description: BindPort sets the secure port for the
                                  API Server to bind to. Defaults to 6443.
                                format: int32
                                type: integer
                            required:
                            - advertiseAddress
                            - bindPort
                            type: object
                        type: object
                      discovery:
                        description: 'Discovery specifies the options for the kubelet
                          to use during the TLS Bootstrap process TODO: revisit when
                          there is defaulting from k/k'
                        properties:
                          bootstrapToken:
                            description: BootstrapToken is used to set the options
                              for bootstrap token based discovery BootstrapToken and
                              File are mutually exclusive
                            properties:
                              apiServerEndpoint:
                                description: APIServerEndpoint is an IP or domain
                                  name to the API server from which info will be fetched.
                                type: string
                              caCertHashes:
                                description: 'CACertHashes specifies a set of public
                                  key pins to verify when token-based discovery is
                                  used. The root CA found during discovery must match
                                  one of these values. Specifying an empty set disables
                                  root CA pinning, which can be unsafe. Each hash
                                  is specified as "<type>:<value>", where the only
                                  currently supported type is "sha256". This is a
                                  hex-encoded SHA-256 hash of the Subject Public Key
                                  Info (SPKI) object in DER-encoded ASN.1. These hashes
                                  can be calculated using, for example, OpenSSL: openssl
                                  x509 -pubkey -in ca.crt openssl rsa -pubin -outform
                                  der 2>&/dev/null | openssl dgst -sha256 -hex'
                                items:
                                  type: string
                                type: array
                              token:
                                description: Token is a token used to validate cluster
                                  information fetched from the control-plane.
                                type: string
                              unsafeSkipCAVerification:
                                description: UnsafeSkipCAVerification allows token-based
                                  discovery without CA verification via CACertHashes.
                                  This can weaken the security of kubeadm since other
                                  nodes can impersonate the control-plane.
                                type: boolean
                            required:
                            - token
                            - unsafeSkipCAVerification
                            type: object
                          file:
                            description: File is used to specify a file or URL to
                              a kubeconfig file from which to load cluster information
                              BootstrapToken and File are mutually exclusive
                            properties:
                              kubeConfigPath:
                                description: KubeConfigPath is used to specify the
                                  actual file path or URL to the kubeconfig file from
                                  which to load cluster information
                                type: string
                            required:
                            - kubeConfigPath
                            type: object
                          timeout:
                            description: Timeout modifies the discovery timeout
                            type: string
                          tlsBootstrapToken:
                            description: 'TLSBootstrapToken is a token used for TLS
                              bootstrapping. If .BootstrapToken is set, this field
                              is defaulted to .BootstrapToken.Token, but can be overridden.
                              If .File is set, this field **must be set** in case
                              the KubeConfigFile does not contain any other authentication
                              information TODO: revisit when there is defaulting from
                              k/k'
                            type: string
                        type: object
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      nodeRegistration:
                        description: NodeRegistration holds fields that relate to
                          registering the new control-plane node to the cluster. When
                          used in the context of control plane nodes, NodeRegistration
                          should remain consistent across both InitConfiguration and
                          JoinConfiguration
                        properties:
                          criSocket:
                            description: CRISocket is used to retrieve container runtime
                              info. This information will be annotated to the Node
                              API object, for later re-use
                            type: string
                          kubeletExtraArgs:
                            additionalProperties:
                              type: string
                            description: KubeletExtraArgs passes through extra arguments
                              to the kubelet. The arguments here are passed to the
                              kubelet command line via the environment file kubeadm
                              writes at runtime for the kubelet to source. This overrides
                              the generic base-level configuration in the kubelet-config-1.X
                              ConfigMap Flags have higher priority when parsing. These
                              values are local and specific to the node kubeadm is
                              executing on.
                            type: object
                          name:
                            description: Name is the `.Metadata.Name` field of the
                              Node API object that will be created in this `kubeadm
                              init` or `kubeadm join` operation. This field is also
                              used in the CommonName field of the kubelet's client
                              certificate to the API server. Defaults to the hostname
                              of the node if not provided.
                            type: string
                          taints:
                            description: 'Taints specifies the taints the Node API
                              object should be registered with. If this field is unset,
                              i.e. nil, in the `kubeadm init` process it will be defaulted
                              to []v1.Taint{''node-role.kubernetes.io/master=""''}.
                              If you don''t want to taint your control-plane node,
                              set this field to an empty slice, i.e. `taints: {}`
                              in the YAML file. This field is solely used for Node
                              registration.'
                            items:
                              description: The node this Taint is attached to has
                                the "effect" on any pod that does not tolerate the
                                Taint.
                              properties:
                                effect:
                                  description: Required. The effect of the taint on
                                    pods that do not tolerate the taint. Valid effects
                                    are NoSchedule, PreferNoSchedule and NoExecute.
                                  type: string
                                key:
                                  description: Required. The taint key to be applied
                                    to a node.
                                  type: string
                                timeAdded:
                                  description: TimeAdded represents the time at which
                                    the taint was added. It is only written for NoExecute
                                    taints.
                                  format: date-time
                                  type: string
                                value:
                                  description: Required. The taint value corresponding
                                    to the taint key.
                                  type: string
                              required:
                              - effect
                              - key
                              type: object
                            type: array
                        type: object
                    type: object
                  mounts:
                    description: Mounts specifies a list of mount points to be setup.
                    items:
                      description: MountPoints defines input for generated mounts
                        in cloud-init.
                      items:
                        type: string
                      type: array
                    type: array
                  ntp:
                    description: NTP specifies NTP configuration
                    properties:
                      enabled:
                        description: Enabled specifies whether NTP should be enabled
                        type: boolean
                      servers:
                        description: Servers specifies which NTP servers to use
                        items:
                          type: string
                        type: array
                    type: object
                  postKubeadmCommands:
                    description: PostKubeadmCommands specifies extra commands to run
                      after kubeadm runs
                    items:
                      type: string
                    type: array
                  preKubeadmCommands:
                    description: PreKubeadmCommands specifies extra commands to run
                      before kubeadm runs
                    items:
                      type: string
                    type: array
                  useExperimentalRetryJoin:
                    description: "UseExperimentalRetryJoin replaces a basic kubeadm
                      command with a shell script with retries for joins. \n This
                      is meant to be an experimental temporary workaround on some
                      environments where joins fail due to timing (and other issues).
                      The long term goal is to add retries to kubeadm proper and use
                      that functionality. \n This will add about 40KB to userdata
                      \n For more information, refer to https://github.com/kubernetes-sigs/cluster-api/pull/2763#discussion_r397306055."
                    type: boolean
                  users:
                    description: Users specifies extra users to add
                    items:
                      description: User defines the input for a generated user in
                        cloud-init.
                      properties:
                        gecos:
                          description: Gecos specifies the gecos to use for the user
                          type: string
                        groups:
                          description: Groups specifies the additional groups for
                            the user
                          type: string
                        homeDir:
                          description: HomeDir specifies the home directory to use
                            for the user
                          type: string
                        inactive:
                          description: Inactive specifies whether to mark the user
                            as inactive
                          type: boolean
                        lockPassword:
                          description: LockPassword specifies if password login should
                            be disabled
                          type: boolean
                        name:
                          description: Name specifies the user name
                          type: string
                        passwd:
                          description: Passwd specifies a hashed password for the
                            user
                          type: string
                        primaryGroup:
                          description: PrimaryGroup specifies the primary group for
                            the user
                          type: string
                        shell:
                          description: Shell specifies the user's shell
                          type: string
                        sshAuthorizedKeys:
                          description: SSHAuthorizedKeys specifies a list of ssh authorized
                            keys for the user
                          items:
                            type: string
                          type: array
                        sudo:
                          description: Sudo specifies a sudo role for the user
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  verbosity:
                    description: Verbosity is the number for the kubeadm log level
                      verbosity. It overrides the `--v` flag in kubeadm commands.
                    format: int32
                    type: integer
                type: object
              nodeDrainTimeout:
                description: 'NodeDrainTimeout is the total amount of time that the
                  controller will spend on draining a controlplane node The default
                  value is 0, meaning that the node can be drained without any time
                  limitations. NOTE: NodeDrainTimeout is different from `kubectl drain
                  --timeout`'
                type: string
              replicas:
                description: Number of desired machines. Defaults to 1. When stacked
                  etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members).
                  This is a pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              rolloutStrategy:
                description: The RolloutStrategy to use to replace control plane machines
                  with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if RolloutStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of control planes that can
                          be scheduled above or under the desired number of control
                          planes. Value can be an absolute number 1 or 0. Defaults
                          to 1. Example: when this is set to 1, the control plane
                          can be scaled up immediately when the rolling update starts.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of rollout. Currently the only supported strategy
                      is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              upgradeAfter:
                description: UpgradeAfter is a field to indicate an upgrade should
                  be performed after the specified time even if no changes have been
                  made to the KubeadmControlPlane
                format: date-time
                type: string
              version:
                description: Version defines the desired Kubernetes version.
                type: string
            required:
            - infrastructureTemplate
            - kubeadmConfigSpec
            - version
            type: object
          status:
            description: KubeadmControlPlaneStatus defines the observed state of KubeadmControlPlane.
            properties:
              conditions:
                description: Conditions defines current service state of the KubeadmControlPlane.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: ErrorMessage indicates that there is a terminal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a terminal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              initialized:
                description: Initialized denotes whether or not the control plane
                  has the uploaded kubeadm-config configmap.
                type: boolean
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              ready:
                description: Ready denotes that the KubeadmControlPlane API Server
                  is ready to receive requests.
                type: boolean
              readyReplicas:
                description: Total number of fully running and ready control plane
                  machines.
                format: int32
                type: integer
              replicas:
                description: Total number of non-terminated machines targeted by this
                  control plane (their labels match the selector).
                format: int32
                type: integer
              selector:
                description: 'Selector is the label selector in string format to avoid
                  introspection by clients, and is used to provide the CRD-based integration
                  for the scale subresource and additional integrations for things
                  like kubectl describe.. The string will be in the same format as
                  the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
                type: string
              unavailableReplicas:
                description: Total number of unavailable machines targeted by this
                  control plane. This is the total number of machines that are still
                  required for the deployment to have 100% available capacity. They
                  may either be machines that are running but not yet ready or machines
                  that still have not been created.
                format: int32
                type: integer
              updatedReplicas:
                description: Total number of non-terminated machines targeted by this
                  control plane that have the desired template spec.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: cluster-api
  name: machinepools.exp.cluster.x-k8s.io
spec:
  group: exp.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MachinePool
    listKind: MachinePoolList
    plural: machinepools
    shortNames:
    - mp
    singular: machinepool
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: MachinePool replicas count
      jsonPath: .status.replicas
      name: Replicas
      type: string
    - description: MachinePool status such as Terminating/Pending/Provisioning/Running/Failed
        etc
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Kubernetes version associated with this MachinePool
      jsonPath: .spec.template.spec.version
      name: Version
      type: string
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: MachinePool is the Schema for the machinepools API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MachinePoolSpec defines the desired state of MachinePool
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              failureDomains:
                description: FailureDomains is the list of failure domains this MachinePool
                  should be attached to.
                items:
                  type: string
                type: array
              minReadySeconds:
                description: Minimum number of seconds for which a newly created machine
                  instances should be ready. Defaults to 0 (machine instance will
                  be considered available as soon as it is ready)
                format: int32
                type: integer
              providerIDList:
                description: ProviderIDList are the identification IDs of machine
                  instances provided by the provider. This field must match the provider
                  IDs as seen on the node objects corresponding to a machine pool's
                  machine instances.
                items:
                  type: string
                type: array
              replicas:
                description: Number of desired machines. Defaults to 1. This is a
                  pointer to distinguish between explicit zero and not specified.
                format: int32
                type: integer
              strategy:
                description: The deployment strategy to use to replace existing machine
                  instances with new ones.
                properties:
                  rollingUpdate:
                    description: Rolling update config params. Present only if MachineDeploymentStrategyType
                      = RollingUpdate.
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be scheduled
                          above the desired number of machines. Value can be an absolute
                          number (ex: 5) or a percentage of desired machines (ex:
                          10%). This can not be 0 if MaxUnavailable is 0. Absolute
                          number is calculated from percentage by rounding up. Defaults
                          to 1. Example: when this is set to 30%, the new MachineSet
                          can be scaled up immediately when the rolling update starts,
                          such that the total number of old and new machines do not
                          exceed 130% of desired machines. Once old machines have
                          been killed, new MachineSet can be scaled up further, ensuring
                          that total number of machines running at any time during
                          the update is at most 130% of desired machines.'
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of machines that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired machines (ex: 10%). Absolute
                          number is calculated from percentage by rounding down. This
                          can not be 0 if MaxSurge is 0. Defaults to 0. Example: when
                          this is set to 30%, the old MachineSet can be scaled down
                          to 70% of desired machines immediately when the rolling
                          update starts. Once new machines are ready, old MachineSet
                          can be scaled down further, followed by scaling up the new
                          MachineSet, ensuring that the total number of machines available
                          at all times during the update is at least 70% of desired
                          machines.'
                        x-kubernetes-int-or-string: true
                    type: object
                  type:
                    description: Type of deployment. Currently the only supported
                      strategy is "RollingUpdate". Default is RollingUpdate.
                    type: string
                type: object
              template:
                description: Template describes the machines that will be created.
                properties:
                  metadata:
                    description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: 'Annotations is an unstructured key value map
                          stored with a resource that may be set by external tools
                          to store and retrieve arbitrary metadata. They are not queryable
                          and should be preserved when modifying objects. More info:
                          http://kubernetes.io/docs/user-guide/annotations'
                        type: object
                      generateName:
                        description: "GenerateName is an optional prefix, used by
                          the server, to generate a unique name ONLY IF the Name field
                          has not been provided. If this field is used, the name returned
                          to the client will be different than the name passed. This
                          value will also be combined with a unique suffix. The provided
                          value has the same validation rules as the Name field, and
                          may be truncated by the length of the suffix required to
                          make the value unique on the server. \n If this field is
                          specified and the generated name exists, the server will
                          NOT return a 409 - instead, it will either return 201 Created
                          or 500 with Reason ServerTimeout indicating a unique name
                          could not be found in the time allotted, and the client
                          should retry (optionally after the time indicated in the
                          Retry-After header). \n Applied only if Name is not specified.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                        type: string
                      labels:
                        additionalProperties:
                          type: string
                        description: 'Map of string keys and values that can be used
                          to organize and categorize (scope and select) objects. May
                          match selectors of replication controllers and services.
                          More info: http://kubernetes.io/docs/user-guide/labels'
                        type: object
                      name:
                        description: 'Name must be unique within a namespace. Is required
                          when creating resources, although some resources may allow
                          a client to request the generation of an appropriate name
                          automatically. Name is primarily intended for creation idempotence
                          and configuration definition. Cannot be updated. More info:
                          http://kubernetes.io/docs/user-guide/identifiers#names'
                        type: string
                      namespace:
                        description: "Namespace defines the space within each name
                          must be unique. An empty namespace is equivalent to the
                          \"default\" namespace, but \"default\" is the canonical
                          representation. Not all objects are required to be scoped
                          to a namespace - the value of this field for those objects
                          will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                          More info: http://kubernetes.io/docs/user-guide/namespaces"
                        type: string
                      ownerReferences:
                        description: List of objects depended by this object. If ALL
                          objects in the list have been deleted, this object will
                          be garbage collected. If this object is managed by a controller,
                          then an entry in this list will point to this controller,
                          with the controller field set to true. There cannot be more
                          than one managing controller.
                        items:
                          description: OwnerReference contains enough information
                            to let you identify an owning object. An owning object
                            must be in the same namespace as the dependent, or be
                            cluster-scoped, so there is no namespace field.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            blockOwnerDeletion:
                              description: If true, AND if the owner has the "foregroundDeletion"
                                finalizer, then the owner cannot be deleted from the
                                key-value store until this reference is removed. Defaults
                                to false. To set this field, a user needs "delete"
                                permission of the owner, otherwise 422 (Unprocessable
                                Entity) will be returned.
                              type: boolean
                            controller:
                              description: If true, this reference points to the managing
                                controller.
                              type: boolean
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                              type: string
                          required:
                          - apiVersion
                          - kind
                          - name
                          - uid
                          type: object
                        type: array
                    type: object
                  spec:
                    description: 'Specification of the desired behavior of the machine.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    properties:
                      bootstrap:
                        description: Bootstrap is a reference to a local struct which
                          encapsulates fields to configure the Machine’s bootstrapping
                          mechanism.
                        properties:
                          configRef:
                            description: ConfigRef is a reference to a bootstrap provider-specific
                              resource that holds configuration details. The reference
                              is optional to allow users/operators to specify Bootstrap.Data
                              without the need of a controller.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                          data:
                            description: "Data contains the bootstrap data, such as
                              cloud-init details scripts. If nil, the Machine should
                              remain in the Pending state. \n Deprecated: This field
                              has been deprecated in v1alpha3 and will be removed
                              in a future version. Switch to DataSecretName."
                            type: string
                          dataSecretName:
                            description: DataSecretName is the name of the secret
                              that stores the bootstrap data script. If nil, the Machine
                              should remain in the Pending state.
                            type: string
                        type: object
                      clusterName:
                        description: ClusterName is the name of the Cluster this object
                          belongs to.
                        minLength: 1
                        type: string
                      failureDomain:
                        description: FailureDomain is the failure domain the machine
                          will be created in. Must match a key in the FailureDomains
                          map stored on the cluster object.
                        type: string
                      infrastructureRef:
                        description: InfrastructureRef is a required reference to
                          a custom resource offered by an infrastructure provider.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      providerID:
                        description: ProviderID is the identification ID of the machine
                          provided by the provider. This field must match the provider
                          ID as seen on the node object corresponding to this machine.
                          This field is required by higher level consumers of cluster-api.
                          Example use case is cluster autoscaler with cluster-api
                          as provider. Clean-up logic in the autoscaler compares machines
                          to nodes to find out machines at provider which could not
                          get registered as Kubernetes nodes. With cluster-api as
                          a generic out-of-tree provider for autoscaler, this field
                          is required by autoscaler to be able to have a provider
                          view of the list of machines. Another list of nodes is queried
                          from the k8s apiserver and then a comparison is done to
                          find out unregistered machines and are marked for delete.
                          This field will be set by the actuators and consumed by
                          higher level entities like autoscaler that will be interfacing
                          with cluster-api as generic provider.
                        type: string
                      version:
                        description: Version defines the desired Kubernetes version.
                          This field is meant to be optionally used by bootstrap providers.
                        type: string
                    required:
                    - bootstrap
                    - clusterName
                    - infrastructureRef
                    type: object
                type: object
            required:
            - clusterName
            - template
            type: object
          status:
            description: MachinePoolStatus defines the observed state of MachinePool
            properties:
              availableReplicas:
                description: The number of available replicas (ready for at least
                  minReadySeconds) for this MachinePool.
                format: int32
                type: integer
              bootstrapReady:
                description: BootstrapReady is the state of the bootstrap provider.
                type: boolean
              conditions:
                description: Conditions define the current service state of the MachinePool.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              failureMessage:
                description: FailureMessage indicates that there is a problem reconciling
                  the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a problem reconciling
                  the state, and will be set to a token value suitable for programmatic
                  interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              nodeRefs:
                description: NodeRefs will point to the corresponding Nodes if it
                  they exist.
                items:
                  description: ObjectReference contains enough information to let
                    you inspect or modify the referred object.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              readyReplicas:
                description: The number of ready replicas for this MachinePool. A
                  machine is considered ready when the node has been created and is
                  "Ready".
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              unavailableReplicas:
                description: Total number of unavailable machine instances targeted
                  by this machine pool. This is the total number of machine instances
                  that are still required for the machine pool to have 100% available
                  capacity. They may either be machine instances that are running
                  but not yet available or machine instances that still have not been
                  created.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.replicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capm3-serving-cert
    controller-gen.kubebuilder.io/version: v0.5.0
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: metal3clusters.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Metal3Cluster
    listKind: Metal3ClusterList
    plural: metal3clusters
    shortNames:
    - m3c
    - m3cluster
    - m3clusters
    - metal3c
    - metal3cluster
    singular: metal3cluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: metal3Cluster is Ready
      jsonPath: .status.ready
      name: Ready
      type: string
    - description: Most recent error
      jsonPath: .status.failureReason
      name: Error
      type: string
    - description: Cluster to which this BMCluster belongs
      jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
      name: Cluster
      type: string
    - description: Control plane endpoint
      jsonPath: .spec.controlPlaneEndpoint
      name: Endpoint
      type: string
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: Metal3Cluster is the Schema for the metal3clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3ClusterSpec defines the desired state of Metal3Cluster.
            properties:
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane.
                properties:
                  host:
                    description: Host is the hostname on which the API server is serving.
                    type: string
                  port:
                    description: Port is the port on which the API server is serving.
                    type: integer
                required:
                - host
                - port
                type: object
              noCloudProvider:
                type: boolean
            required:
            - controlPlaneEndpoint
            type: object
          status:
            description: Metal3ClusterStatus defines the observed state of Metal3Cluster.
            properties:
              failureMessage:
                description: FailureMessage indicates that there is a fatal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a fatal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              lastUpdated:
                description: LastUpdated identifies when this status was last observed.
                format: date-time
                type: string
              ready:
                description: Ready denotes that the Metal3 cluster (infrastructure)
                  is ready. In Baremetal case, it does not mean anything for now as
                  no infrastructure steps need to be performed. Required by Cluster
                  API. Set to True by the metal3Cluster controller after creation.
                type: boolean
            required:
            - ready
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: metal3Cluster is Ready
      jsonPath: .status.ready
      name: Ready
      type: string
    - description: Most recent error
      jsonPath: .status.failureReason
      name: Error
      type: string
    - description: Cluster to which this BMCluster belongs
      jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
      name: Cluster
      type: string
    - description: Control plane endpoint
      jsonPath: .spec.controlPlaneEndpoint
      name: Endpoint
      type: string
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: Metal3Cluster is the Schema for the metal3clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3ClusterSpec defines the desired state of Metal3Cluster.
            properties:
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane.
                properties:
                  host:
                    description: Host is the hostname on which the API server is serving.
                    type: string
                  port:
                    description: Port is the port on which the API server is serving.
                    type: integer
                required:
                - host
                - port
                type: object
              noCloudProvider:
                type: boolean
            required:
            - controlPlaneEndpoint
            type: object
          status:
            description: Metal3ClusterStatus defines the observed state of Metal3Cluster.
            properties:
              failureMessage:
                description: FailureMessage indicates that there is a fatal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a fatal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              lastUpdated:
                description: LastUpdated identifies when this status was last observed.
                format: date-time
                type: string
              ready:
                description: Ready denotes that the Metal3 cluster (infrastructure)
                  is ready. In Baremetal case, it does not mean anything for now as
                  no infrastructure steps need to be performed. Required by Cluster
                  API. Set to True by the metal3Cluster controller after creation.
                type: boolean
            required:
            - ready
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capm3-serving-cert
    controller-gen.kubebuilder.io/version: v0.5.0
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: metal3dataclaims.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Metal3DataClaim
    listKind: Metal3DataClaimList
    plural: metal3dataclaims
    shortNames:
    - m3dc
    - m3dataclaim
    - m3dataclaims
    - metal3dc
    - metal3dataclaim
    singular: metal3dataclaim
  scope: Namespaced
  versions:
  - name: v1alpha4
    schema:
      openAPIV3Schema:
        description: Metal3DataClaim is the Schema for the metal3datas API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3DataClaimSpec defines the desired state of Metal3DataClaim.
            properties:
              template:
                description: Template is the Metal3DataTemplate this was generated
                  for.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
            required:
            - template
            type: object
          status:
            description: Metal3DataClaimStatus defines the observed state of Metal3DataClaim.
            properties:
              errorMessage:
                description: ErrorMessage contains the error message
                type: string
              renderedData:
                description: RenderedData references the Metal3Data when ready
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capm3-serving-cert
    controller-gen.kubebuilder.io/version: v0.5.0
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: metal3datas.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Metal3Data
    listKind: Metal3DataList
    plural: metal3datas
    shortNames:
    - m3d
    - m3data
    - m3datas
    - metal3d
    - metal3data
    singular: metal3data
  scope: Namespaced
  versions:
  - name: v1alpha4
    schema:
      openAPIV3Schema:
        description: Metal3Data is the Schema for the metal3datas API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3DataSpec defines the desired state of Metal3Data.
            properties:
              claim:
                description: DataClaim points to the Metal3DataClaim the Metal3Data
                  was created for.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              index:
                description: Index stores the index value of this instance in the
                  Metal3DataTemplate.
                type: integer
              metaData:
                description: MetaData points to the rendered MetaData secret.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
              networkData:
                description: NetworkData points to the rendered NetworkData secret.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
              template:
                description: DataTemplate is the Metal3DataTemplate this was generated
                  from.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              templateReference:
                description: TemplateReference refers to the Template the Metal3MachineTemplate
                  refers to. It can be matched against the key or it may also point
                  to the name of the template Metal3Data refers to
                type: string
            required:
            - claim
            - template
            type: object
          status:
            description: Metal3DataStatus defines the observed state of Metal3Data.
            properties:
              errorMessage:
                description: ErrorMessage contains the error message
                type: string
              ready:
                description: Ready is a flag set to True if the secrets were rendered
                  properly
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capm3-serving-cert
    controller-gen.kubebuilder.io/version: v0.5.0
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: metal3datatemplates.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Metal3DataTemplate
    listKind: Metal3DataTemplateList
    plural: metal3datatemplates
    shortNames:
    - m3dt
    - m3datatemplate
    - m3datatemplates
    - metal3dt
    - metal3datatemplate
    singular: metal3datatemplate
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Cluster to which this template belongs
      jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
      name: Cluster
      type: string
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: Metal3DataTemplate is the Schema for the metal3datatemplates
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3DataTemplateSpec defines the desired state of Metal3DataTemplate.
            properties:
              clusterName:
                description: ClusterName is the name of the Cluster this object belongs
                  to.
                minLength: 1
                type: string
              metaData:
                description: MetaData contains the information needed to generate
                  the metadata secret
                properties:
                  dnsServersFromIPPool:
                    description: DNSServersFromPool is the list of metadata items
                      to be rendered as dns servers.
                    items:
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        name:
                          description: Name is the name of the IPPool used to fetch
                            the value to set in the metadata map for cloud-init
                          type: string
                      required:
                      - key
                      - name
                      type: object
                    type: array
                  fromAnnotations:
                    description: FromAnnotations is the list of metadata items to
                      be fetched from object Annotations
                    items:
                      description: MetaDataFromAnnotation contains the information
                        to fetch an annotation content, if the label does not exist,
                        it is rendered as empty string
                      properties:
                        annotation:
                          description: Annotation is the key of the Annotation to
                            fetch
                          type: string
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        object:
                          description: Object is the type of the object from which
                            we retrieve the name
                          enum:
                          - machine
                          - metal3machine
                          - baremetalhost
                          type: string
                      required:
                      - annotation
                      - key
                      - object
                      type: object
                    type: array
                  fromHostInterfaces:
                    description: FromHostInterfaces is the list of metadata items
                      to be rendered as MAC addresses of the host interfaces.
                    items:
                      description: MetaDataHostInterface contains the information
                        to render the object name
                      properties:
                        interface:
                          description: Interface is the name of the interface in the
                            BareMetalHost Status Hardware Details list of interfaces
                            from which to fetch the MAC address.
                          type: string
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                      required:
                      - interface
                      - key
                      type: object
                    type: array
                  fromLabels:
                    description: FromLabels is the list of metadata items to be fetched
                      from object labels
                    items:
                      description: MetaDataFromLabel contains the information to fetch
                        a label content, if the label does not exist, it is rendered
                        as empty string
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        label:
                          description: Label is the key of the label to fetch
                          type: string
                        object:
                          description: Object is the type of the object from which
                            we retrieve the name
                          enum:
                          - machine
                          - metal3machine
                          - baremetalhost
                          type: string
                      required:
                      - key
                      - label
                      - object
                      type: object
                    type: array
                  gatewaysFromIPPool:
                    description: GatewaysFromPool is the list of metadata items to
                      be rendered as gateway addresses.
                    items:
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        name:
                          description: Name is the name of the IPPool used to fetch
                            the value to set in the metadata map for cloud-init
                          type: string
                      required:
                      - key
                      - name
                      type: object
                    type: array
                  indexes:
                    description: Indexes is the list of metadata items to be rendered
                      from the index of the Metal3Data
                    items:
                      description: MetaDataIndex contains the information to render
                        the index
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        offset:
                          description: Offset is the offset to apply to the index
                            when rendering it
                          type: integer
                        prefix:
                          description: Prefix is the prefix string
                          type: string
                        step:
                          default: 1
                          description: Step is the multiplier of the index
                          type: integer
                        suffix:
                          description: Suffix is the suffix string
                          type: string
                      required:
                      - key
                      type: object
                    type: array
                  ipAddressesFromIPPool:
                    description: IPAddressesFromPool is the list of metadata items
                      to be rendered as ip addresses.
                    items:
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        name:
                          description: Name is the name of the IPPool used to fetch
                            the value to set in the metadata map for cloud-init
                          type: string
                      required:
                      - key
                      - name
                      type: object
                    type: array
                  namespaces:
                    description: Namespaces is the list of metadata items to be rendered
                      from the namespace
                    items:
                      description: MetaDataNamespace contains the information to render
                        the namespace
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                      required:
                      - key
                      type: object
                    type: array
                  objectNames:
                    description: ObjectNames is the list of metadata items to be rendered
                      from the name of objects.
                    items:
                      description: MetaDataObjectName contains the information to
                        render the object name
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        object:
                          description: Object is the type of the object from which
                            we retrieve the name
                          enum:
                          - machine
                          - metal3machine
                          - baremetalhost
                          type: string
                      required:
                      - key
                      - object
                      type: object
                    type: array
                  prefixesFromIPPool:
                    description: PrefixesFromPool is the list of metadata items to
                      be rendered as network prefixes.
                    items:
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        name:
                          description: Name is the name of the IPPool used to fetch
                            the value to set in the metadata map for cloud-init
                          type: string
                      required:
                      - key
                      - name
                      type: object
                    type: array
                  strings:
                    description: Strings is the list of metadata items to be rendered
                      from strings
                    items:
                      description: MetaDataString contains the information to render
                        the string
                      properties:
                        key:
                          description: Key will be used as the key to set in the metadata
                            map for cloud-init
                          type: string
                        value:
                          description: Value is the string to render.
                          type: string
                      required:
                      - key
                      - value
                      type: object
                    type: array
                type: object
              networkData:
                description: NetworkData contains the information needed to generate
                  the networkdata secret
                properties:
                  links:
                    description: Links is a structure containing lists of different
                      types objects
                    properties:
                      bonds:
                        description: Bonds contains a list of Bond links
                        items:
                          description: NetworkDataLinkBond represents a bond link
                            object
                          properties:
                            bondLinks:
                              description: BondLinks is the list of links that are
                                part of the bond.
                              items:
                                type: string
                              type: array
                            bondMode:
                              description: BondMode is the mode of bond used. It can
                                be one of balance-rr, active-backup, balance-xor,
                                broadcast, balance-tlb, balance-alb, 802.1ad
                              enum:
                              - balance-rr
                              - active-backup
                              - balance-xor
                              - broadcast
                              - balance-tlb
                              - balance-alb
                              - 802.1ad
                              type: string
                            id:
                              description: Id is the ID of the interface (used for
                                naming)
                              type: string
                            macAddress:
                              description: MACAddress is the MAC address of the interface,
                                containing the object used to render it.
                              properties:
                                fromHostInterface:
                                  description: FromHostInterface contains the name
                                    of the interface in the BareMetalHost Introspection
                                    details from which to fetch the MAC address
                                  type: string
                                string:
                                  description: String contains the MAC address given
                                    as a string
                                  type: string
                              type: object
                            mtu:
                              default: 1500
                              description: MTU is the MTU of the interface
                              maximum: 9000
                              type: integer
                          required:
                          - bondLinks
                          - bondMode
                          - id
                          - macAddress
                          type: object
                        type: array
                      ethernets:
                        description: Ethernets contains a list of Ethernet links
                        items:
                          description: NetworkDataLinkEthernet represents an ethernet
                            link object
                          properties:
                            id:
                              description: Id is the ID of the interface (used for
                                naming)
                              type: string
                            macAddress:
                              description: MACAddress is the MAC address of the interface,
                                containing the object used to render it.
                              properties:
                                fromHostInterface:
                                  description: FromHostInterface contains the name
                                    of the interface in the BareMetalHost Introspection
                                    details from which to fetch the MAC address
                                  type: string
                                string:
                                  description: String contains the MAC address given
                                    as a string
                                  type: string
                              type: object
                            mtu:
                              default: 1500
                              description: MTU is the MTU of the interface
                              maximum: 9000
                              type: integer
                            type:
                              description: 'Type is the type of the ethernet link.
                                It can be one of: bridge, dvs, hw_veb, hyperv, ovs,
                                tap, vhostuser, vif, phy'
                              enum:
                              - bridge
                              - dvs
                              - hw_veb
                              - hyperv
                              - ovs
                              - tap
                              - vhostuser
                              - vif
                              - phy
                              type: string
                          required:
                          - id
                          - macAddress
                          - type
                          type: object
                        type: array
                      vlans:
                        description: Vlans contains a list of Vlan links
                        items:
                          description: NetworkDataLinkVlan represents a vlan link
                            object
                          properties:
                            id:
                              description: Id is the ID of the interface (used for
                                naming)
                              type: string
                            macAddress:
                              description: MACAddress is the MAC address of the interface,
                                containing the object used to render it.
                              properties:
                                fromHostInterface:
                                  description: FromHostInterface contains the name
                                    of the interface in the BareMetalHost Introspection
                                    details from which to fetch the MAC address
                                  type: string
                                string:
                                  description: String contains the MAC address given
                                    as a string
                                  type: string
                              type: object
                            mtu:
                              default: 1500
                              description: MTU is the MTU of the interface
                              maximum: 9000
                              type: integer
                            vlanID:
                              description: VlanID is the Vlan ID
                              maximum: 4096
                              type: integer
                            vlanLink:
                              description: VlanLink is the name of the link on which
                                the vlan should be added
                              type: string
                          required:
                          - id
                          - macAddress
                          - vlanID
                          - vlanLink
                          type: object
                        type: array
                    type: object
                  networks:
                    description: Networks  is a structure containing lists of different
                      types objects
                    properties:
                      ipv4:
                        description: IPv4 contains a list of IPv4 static allocations
                        items:
                          description: NetworkDataIPv4 represents an ipv4 static network
                            object
                          properties:
                            id:
                              description: ID is the network ID (name)
                              type: string
                            ipAddressFromIPPool:
                              description: IPAddressFromIPPool contains the name of
                                the IPPool to use to get an ip address
                              type: string
                            link:
                              description: Link is the link on which the network applies
                              type: string
                            routes:
                              description: Routes contains a list of IPv4 routes
                              items:
                                description: NetworkDataRoutev4 represents an ipv4
                                  route object
                                properties:
                                  gateway:
                                    description: Gateway is the IPv4 address of the
                                      gateway
                                    properties:
                                      fromIPPool:
                                        description: FromIPPool is the name of the
                                          IPPool to fetch the gateway from
                                        type: string
                                      string:
                                        description: String is the gateway given as
                                          a string
                                        pattern: ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
                                        type: string
                                    type: object
                                  network:
                                    description: Network is the IPv4 network address
                                    pattern: ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
                                    type: string
                                  prefix:
                                    description: Prefix is the mask of the network
                                      as integer (max 32)
                                    maximum: 32
                                    type: integer
                                  services:
                                    description: Services is a list of IPv4 services
                                    properties:
                                      dns:
                                        description: DNS is a list of IPv4 DNS services
                                        items:
                                          description: IPAddressv4 is used for validation
                                            of an IPv6 address
                                          pattern: ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
                                          type: string
                                        type: array
                                      dnsFromIPPool:
                                        description: DNSFromIPPool is the name of
                                          the IPPool from which to get the DNS servers
                                        type: string
                                    type: object
                                required:
                                - gateway
                                - network
                                type: object
                              type: array
                          required:
                          - id
                          - ipAddressFromIPPool
                          - link
                          type: object
                        type: array
                      ipv4DHCP:
                        description: IPv4 contains a list of IPv4 DHCP allocations
                        items:
                          description: NetworkDataIPv4DHCP represents an ipv4 DHCP
                            network object
                          properties:
                            id:
                              description: ID is the network ID (name)
                              type: string
                            link:
                              description: Link is the link on which the network applies
                              type: string
                            routes:
                              description: Routes contains a list of IPv4 routes
                              items:
                                description: NetworkDataRoutev4 represents an ipv4
                                  route object
                                properties:
                                  gateway:
                                    description: Gateway is the IPv4 address of the
                                      gateway
                                    properties:
                                      fromIPPool:
                                        description: FromIPPool is the name of the
                                          IPPool to fetch the gateway from
                                        type: string
                                      string:
                                        description: String is the gateway given as
                                          a string
                                        pattern: ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
                                        type: string
                                    type: object
                                  network:
                                    description: Network is the IPv4 network address
                                    pattern: ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
                                    type: string
                                  prefix:
                                    description: Prefix is the mask of the network
                                      as integer (max 32)
                                    maximum: 32
                                    type: integer
                                  services:
                                    description: Services is a list of IPv4 services
                                    properties:
                                      dns:
                                        description: DNS is a list of IPv4 DNS services
                                        items:
                                          description: IPAddressv4 is used for validation
                                            of an IPv6 address
                                          pattern: ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
                                          type: string
                                        type: array
                                      dnsFromIPPool:
                                        description: DNSFromIPPool is the name of
                                          the IPPool from which to get the DNS servers
                                        type: string
                                    type: object
                                required:
                                - gateway
                                - network
                                type: object
                              type: array
                          required:
                          - id
                          - link
                          type: object
                        type: array
                      ipv6:
                        description: IPv4 contains a list of IPv6 static allocations
                        items:
                          description: NetworkDataIPv6 represents an ipv6 static network
                            object
                          properties:
                            id:
                              description: ID is the network ID (name)
                              type: string
                            ipAddressFromIPPool:
                              description: IPAddressFromIPPool contains the name of
                                the IPPool to use to get an ip address
                              type: string
                            link:
                              description: Link is the link on which the network applies
                              type: string
                            routes:
                              description: Routes contains a list of IPv6 routes
                              items:
                                description: NetworkDataRoutev6 represents an ipv6
                                  route object
                                properties:
                                  gateway:
                                    description: Gateway is the IPv6 address of the
                                      gateway
                                    properties:
                                      fromIPPool:
                                        description: FromIPPool is the name of the
                                          IPPool to fetch the gateway from
                                        type: string
                                      string:
                                        description: String is the gateway given as
                                          a string
                                        pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                        type: string
                                    type: object
                                  network:
                                    description: Network is the IPv6 network address
                                    pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                    type: string
                                  prefix:
                                    description: Prefix is the mask of the network
                                      as integer (max 128)
                                    maximum: 128
                                    type: integer
                                  services:
                                    description: Services is a list of IPv6 services
                                    properties:
                                      dns:
                                        description: DNS is a list of IPv6 DNS services
                                        items:
                                          description: IPAddressv6 is used for validation
                                            of an IPv6 address
                                          pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                          type: string
                                        type: array
                                      dnsFromIPPool:
                                        description: DNSFromIPPool is the name of
                                          the IPPool from which to get the DNS servers
                                        type: string
                                    type: object
                                required:
                                - gateway
                                - network
                                type: object
                              type: array
                          required:
                          - id
                          - ipAddressFromIPPool
                          - link
                          type: object
                        type: array
                      ipv6DHCP:
                        description: IPv4 contains a list of IPv6 DHCP allocations
                        items:
                          description: NetworkDataIPv6DHCP represents an ipv6 DHCP
                            network object
                          properties:
                            id:
                              description: ID is the network ID (name)
                              type: string
                            link:
                              description: Link is the link on which the network applies
                              type: string
                            routes:
                              description: Routes contains a list of IPv6 routes
                              items:
                                description: NetworkDataRoutev6 represents an ipv6
                                  route object
                                properties:
                                  gateway:
                                    description: Gateway is the IPv6 address of the
                                      gateway
                                    properties:
                                      fromIPPool:
                                        description: FromIPPool is the name of the
                                          IPPool to fetch the gateway from
                                        type: string
                                      string:
                                        description: String is the gateway given as
                                          a string
                                        pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                        type: string
                                    type: object
                                  network:
                                    description: Network is the IPv6 network address
                                    pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                    type: string
                                  prefix:
                                    description: Prefix is the mask of the network
                                      as integer (max 128)
                                    maximum: 128
                                    type: integer
                                  services:
                                    description: Services is a list of IPv6 services
                                    properties:
                                      dns:
                                        description: DNS is a list of IPv6 DNS services
                                        items:
                                          description: IPAddressv6 is used for validation
                                            of an IPv6 address
                                          pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                          type: string
                                        type: array
                                      dnsFromIPPool:
                                        description: DNSFromIPPool is the name of
                                          the IPPool from which to get the DNS servers
                                        type: string
                                    type: object
                                required:
                                - gateway
                                - network
                                type: object
                              type: array
                          required:
                          - id
                          - link
                          type: object
                        type: array
                      ipv6SLAAC:
                        description: IPv4 contains a list of IPv6 SLAAC allocations
                        items:
                          description: NetworkDataIPv6DHCP represents an ipv6 DHCP
                            network object
                          properties:
                            id:
                              description: ID is the network ID (name)
                              type: string
                            link:
                              description: Link is the link on which the network applies
                              type: string
                            routes:
                              description: Routes contains a list of IPv6 routes
                              items:
                                description: NetworkDataRoutev6 represents an ipv6
                                  route object
                                properties:
                                  gateway:
                                    description: Gateway is the IPv6 address of the
                                      gateway
                                    properties:
                                      fromIPPool:
                                        description: FromIPPool is the name of the
                                          IPPool to fetch the gateway from
                                        type: string
                                      string:
                                        description: String is the gateway given as
                                          a string
                                        pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                        type: string
                                    type: object
                                  network:
                                    description: Network is the IPv6 network address
                                    pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                    type: string
                                  prefix:
                                    description: Prefix is the mask of the network
                                      as integer (max 128)
                                    maximum: 128
                                    type: integer
                                  services:
                                    description: Services is a list of IPv6 services
                                    properties:
                                      dns:
                                        description: DNS is a list of IPv6 DNS services
                                        items:
                                          description: IPAddressv6 is used for validation
                                            of an IPv6 address
                                          pattern: ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$
                                          type: string
                                        type: array
                                      dnsFromIPPool:
                                        description: DNSFromIPPool is the name of
                                          the IPPool from which to get the DNS servers
                                        type: string
                                    type: object
                                required:
                                - gateway
                                - network
                                type: object
                              type: array
                          required:
                          - id
                          - link
                          type: object
                        type: array
                    type: object
                  services:
                    description: Services  is a structure containing lists of different
                      types objects
                    properties:
                      dns:
                        description: DNS is a list of DNS services
                        items:
                          description: IPAddress is used for validation of an IP address
                          pattern: ((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$))
                          type: string
                        type: array
                      dnsFromIPPool:
                        description: DNSFromIPPool is the name of the IPPool from
                          which to get the DNS servers
                        type: string
                    type: object
                type: object
              templateReference:
                description: TemplateReference refers to the Template the Metal3MachineTemplate
                  refers to. It can be matched against the key or it may also point
                  to the name of the template Metal3Data refers to
                type: string
            required:
            - clusterName
            type: object
          status:
            description: Metal3DataTemplateStatus defines the observed state of Metal3DataTemplate.
            properties:
              indexes:
                additionalProperties:
                  type: integer
                description: Indexes contains the map of Metal3Machine and index used
                type: object
              lastUpdated:
                description: LastUpdated identifies when this status was last observed.
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capm3-serving-cert
    controller-gen.kubebuilder.io/version: v0.5.0
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: metal3machines.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Metal3Machine
    listKind: Metal3MachineList
    plural: metal3machines
    shortNames:
    - m3m
    - m3machine
    - m3machines
    - metal3m
    - metal3machine
    singular: metal3machine
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Provider ID
      jsonPath: .spec.providerID
      name: ProviderID
      type: string
    - description: metal3machine is Ready
      jsonPath: .status.ready
      name: Ready
      type: string
    - description: Cluster to which this M3Machine belongs
      jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
      name: Cluster
      type: string
    - description: metal3machine current phase
      jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: Metal3Machine is the Schema for the metal3machines API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3MachineSpec defines the desired state of Metal3Machine
            properties:
              hostSelector:
                description: HostSelector specifies matching criteria for labels on
                  BareMetalHosts. This is used to limit the set of BareMetalHost objects
                  considered for claiming for a metal3machine.
                properties:
                  matchExpressions:
                    description: Label match expressions that must be true on a chosen
                      BareMetalHost
                    items:
                      properties:
                        key:
                          type: string
                        operator:
                          description: Operator represents a key/field's relationship
                            to value(s). See labels.Requirement and fields.Requirement
                            for more details.
                          type: string
                        values:
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      - values
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: Key/value pairs of labels that must exist on a chosen
                      BareMetalHost
                    type: object
                type: object
              image:
                description: Image is the image to be provisioned.
                properties:
                  checksum:
                    description: Checksum is a md5sum value or a URL to retrieve one.
                    type: string
                  checksumType:
                    description: ChecksumType is the checksum algorithm for the image.
                      e.g md5, sha256, sha512
                    enum:
                    - md5
                    - sha256
                    - sha512
                    type: string
                  format:
                    description: DiskFormat contains the image disk format
                    enum:
                    - raw
                    - qcow2
                    - vdi
                    - vmdk
                    type: string
                  url:
                    description: URL is a location of an image to deploy.
                    type: string
                required:
                - checksum
                - url
                type: object
              providerID:
                description: ProviderID will be the Metal3 machine in ProviderID format
                  (metal3://<bmh-uuid>)
                type: string
              userData:
                description: UserData references the Secret that holds user data needed
                  by the bare metal operator. The Namespace is optional; it will default
                  to the metal3machine's namespace if not specified.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
            required:
            - image
            type: object
          status:
            description: Metal3MachineStatus defines the observed state of Metal3Machine
            properties:
              addresses:
                description: Addresses is a list of addresses assigned to the machine.
                  This field is copied from the infrastructure provider reference.
                items:
                  description: MachineAddress contains information for the node's
                    address.
                  properties:
                    address:
                      description: The machine address.
                      type: string
                    type:
                      description: Machine address type, one of Hostname, ExternalIP
                        or InternalIP.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              failureMessage:
                description: "FailureMessage will be set in the event that there is
                  a terminal problem reconciling the metal3machine and will contain
                  a more verbose string suitable for logging and human consumption.
                  \n This field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the metal3machine's spec or the configuration of the
                  controller, and that manual intervention is required. Examples of
                  terminal errors would be invalid combinations of settings in the
                  spec, values that are unsupported by the controller, or the responsible
                  controller itself being critically misconfigured. \n Any transient
                  errors that occur during the reconciliation of metal3machines can
                  be added as events to the metal3machine object and/or logged in
                  the controller's output."
                type: string
              failureReason:
                description: "FailureReason will be set in the event that there is
                  a terminal problem reconciling the metal3machine and will contain
                  a succinct value suitable for machine interpretation. \n This field
                  should not be set for transitive errors that a controller faces
                  that are expected to be fixed automatically over time (like service
                  outages), but instead indicate that something is fundamentally wrong
                  with the metal3machine's spec or the configuration of the controller,
                  and that manual intervention is required. Examples of terminal errors
                  would be invalid combinations of settings in the spec, values that
                  are unsupported by the controller, or the responsible controller
                  itself being critically misconfigured. \n Any transient errors that
                  occur during the reconciliation of metal3machines can be added as
                  events to the metal3machine object and/or logged in the controller's
                  output."
                type: string
              lastUpdated:
                description: LastUpdated identifies when this status was last observed.
                format: date-time
                type: string
              phase:
                description: Phase represents the current phase of machine actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              ready:
                description: 'Ready is the state of the metal3. TODO : Document the
                  variable : mhrivnak: " it would be good to document what this means,
                  how to interpret it, under what circumstances the value changes,
                  etc."'
                type: boolean
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: Provider ID
      jsonPath: .spec.providerID
      name: ProviderID
      type: string
    - description: metal3machine is Ready
      jsonPath: .status.ready
      name: Ready
      type: string
    - description: Cluster to which this M3Machine belongs
      jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
      name: Cluster
      type: string
    - description: metal3machine current phase
      jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: Metal3Machine is the Schema for the metal3machines API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3MachineSpec defines the desired state of Metal3Machine
            properties:
              dataTemplate:
                description: MetadataTemplate is a reference to a Metal3DataTemplate
                  object containing a template of metadata to be rendered. Metadata
                  keys defined in the metadataTemplate take precendence over keys
                  defined in metadata field.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              hostSelector:
                description: HostSelector specifies matching criteria for labels on
                  BareMetalHosts. This is used to limit the set of BareMetalHost objects
                  considered for claiming for a metal3machine.
                properties:
                  matchExpressions:
                    description: Label match expressions that must be true on a chosen
                      BareMetalHost
                    items:
                      properties:
                        key:
                          type: string
                        operator:
                          description: Operator represents a key/field's relationship
                            to value(s). See labels.Requirement and fields.Requirement
                            for more details.
                          type: string
                        values:
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      - values
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: Key/value pairs of labels that must exist on a chosen
                      BareMetalHost
                    type: object
                type: object
              image:
                description: Image is the image to be provisioned.
                properties:
                  checksum:
                    description: Checksum is a md5sum value or a URL to retrieve one.
                    type: string
                  checksumType:
                    description: ChecksumType is the checksum algorithm for the image.
                      e.g md5, sha256, sha512
                    enum:
                    - md5
                    - sha256
                    - sha512
                    type: string
                  format:
                    description: DiskFormat contains the image disk format
                    enum:
                    - raw
                    - qcow2
                    - vdi
                    - vmdk
                    type: string
                  url:
                    description: URL is a location of an image to deploy.
                    type: string
                required:
                - checksum
                - url
                type: object
              metaData:
                description: MetaData is an object storing the reference to the secret
                  containing the Metadata given by the user.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
              networkData:
                description: NetworkData is an object storing the reference to the
                  secret containing the network data given by the user.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
              providerID:
                description: ProviderID will be the Metal3 machine in ProviderID format
                  (metal3://<bmh-uuid>)
                type: string
              userData:
                description: UserData references the Secret that holds user data needed
                  by the bare metal operator. The Namespace is optional; it will default
                  to the metal3machine's namespace if not specified.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
            required:
            - image
            type: object
          status:
            description: Metal3MachineStatus defines the observed state of Metal3Machine
            properties:
              addresses:
                description: Addresses is a list of addresses assigned to the machine.
                  This field is copied from the infrastructure provider reference.
                items:
                  description: MachineAddress contains information for the node's
                    address.
                  properties:
                    address:
                      description: The machine address.
                      type: string
                    type:
                      description: Machine address type, one of Hostname, ExternalIP
                        or InternalIP.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              failureMessage:
                description: "FailureMessage will be set in the event that there is
                  a terminal problem reconciling the metal3machine and will contain
                  a more verbose string suitable for logging and human consumption.
                  \n This field should not be set for transitive errors that a controller
                  faces that are expected to be fixed automatically over time (like
                  service outages), but instead indicate that something is fundamentally
                  wrong with the metal3machine's spec or the configuration of the
                  controller, and that manual intervention is required. Examples of
                  terminal errors would be invalid combinations of settings in the
                  spec, values that are unsupported by the controller, or the responsible
                  controller itself being critically misconfigured. \n Any transient
                  errors that occur during the reconciliation of metal3machines can
                  be added as events to the metal3machine object and/or logged in
                  the controller's output."
                type: string
              failureReason:
                description: "FailureReason will be set in the event that there is
                  a terminal problem reconciling the metal3machine and will contain
                  a succinct value suitable for machine interpretation. \n This field
                  should not be set for transitive errors that a controller faces
                  that are expected to be fixed automatically over time (like service
                  outages), but instead indicate that something is fundamentally wrong
                  with the metal3machine's spec or the configuration of the controller,
                  and that manual intervention is required. Examples of terminal errors
                  would be invalid combinations of settings in the spec, values that
                  are unsupported by the controller, or the responsible controller
                  itself being critically misconfigured. \n Any transient errors that
                  occur during the reconciliation of metal3machines can be added as
                  events to the metal3machine object and/or logged in the controller's
                  output."
                type: string
              lastUpdated:
                description: LastUpdated identifies when this status was last observed.
                format: date-time
                type: string
              metaData:
                description: MetaData is an object storing the reference to the secret
                  containing the Metadata used to deploy the BareMetalHost.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
              networkData:
                description: NetworkData is an object storing the reference to the
                  secret containing the network data used to deploy the BareMetalHost.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
              phase:
                description: Phase represents the current phase of machine actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
              ready:
                description: 'Ready is the state of the metal3. TODO : Document the
                  variable : mhrivnak: " it would be good to document what this means,
                  how to interpret it, under what circumstances the value changes,
                  etc."'
                type: boolean
              renderedData:
                description: RenderedData is a reference to a rendered Metal3Data
                  object containing the references to metaData and networkData secrets.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              userData:
                description: UserData references the Secret that holds user data needed
                  by the bare metal operator. The Namespace is optional; it will default
                  to the metal3machine's namespace if not specified.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ocp-cluster-api/capm3-serving-cert
    controller-gen.kubebuilder.io/version: v0.5.0
  labels:
    cluster.x-k8s.io/provider: infrastructure-metal3
    cluster.x-k8s.io/v1alpha3: v1alpha3_v1alpha4
  name: metal3machinetemplates.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Metal3MachineTemplate
    listKind: Metal3MachineTemplateList
    plural: metal3machinetemplates
    shortNames:
    - m3mt
    - m3machinetemplate
    - m3machinetemplates
    - metal3mt
    - metal3machinetemplate
    singular: metal3machinetemplate
  scope: Namespaced
  versions:
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: Metal3MachineTemplate is the Schema for the metal3machinetemplates
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3MachineTemplateSpec defines the desired state of Metal3MachineTemplate
            properties:
              template:
                description: Metal3MachineTemplateResource describes the data needed
                  to create a Metal3Machine from a template
                properties:
                  spec:
                    description: Spec is the specification of the desired behavior
                      of the machine.
                    properties:
                      hostSelector:
                        description: HostSelector specifies matching criteria for
                          labels on BareMetalHosts. This is used to limit the set
                          of BareMetalHost objects considered for claiming for a metal3machine.
                        properties:
                          matchExpressions:
                            description: Label match expressions that must be true
                              on a chosen BareMetalHost
                            items:
                              properties:
                                key:
                                  type: string
                                operator:
                                  description: Operator represents a key/field's relationship
                                    to value(s). See labels.Requirement and fields.Requirement
                                    for more details.
                                  type: string
                                values:
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              - values
                              type: object
                            type: array
                          matchLabels:
                            additionalProperties:
                              type: string
                            description: Key/value pairs of labels that must exist
                              on a chosen BareMetalHost
                            type: object
                        type: object
                      image:
                        description: Image is the image to be provisioned.
                        properties:
                          checksum:
                            description: Checksum is a md5sum value or a URL to retrieve
                              one.
                            type: string
                          checksumType:
                            description: ChecksumType is the checksum algorithm for
                              the image. e.g md5, sha256, sha512
                            enum:
                            - md5
                            - sha256
                            - sha512
                            type: string
                          format:
                            description: DiskFormat contains the image disk format
                            enum:
                            - raw
                            - qcow2
                            - vdi
                            - vmdk
                            type: string
                          url:
                            description: URL is a location of an image to deploy.
                            type: string
                        required:
                        - checksum
                        - url
                        type: object
                      providerID:
                        description: ProviderID will be the Metal3 machine in ProviderID
                          format (metal3://<bmh-uuid>)
                        type: string
                      userData:
                        description: UserData references the Secret that holds user
                          data needed by the bare metal operator. The Namespace is
                          optional; it will default to the metal3machine's namespace
                          if not specified.
                        properties:
                          name:
                            description: Name is unique within a namespace to reference
                              a secret resource.
                            type: string
                          namespace:
                            description: Namespace defines the space within which
                              the secret name must be unique.
                            type: string
                        type: object
                    required:
                    - image
                    type: object
                required:
                - spec
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: false
  - name: v1alpha4
    schema:
      openAPIV3Schema:
        description: Metal3MachineTemplate is the Schema for the metal3machinetemplates
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Metal3MachineTemplateSpec defines the desired state of Metal3MachineTemplate
            properties:
              nodeReuse:
                default: false
                description: When set to True, CAPM3 Machine controller will pick
                  the same pool of BMHs' that were released during the upgrade operation.
                type: boolean
              template:
                description: Metal3MachineTemplateResource describes the data needed
                  to create a Metal3Machine from a template
                properties:
                  spec:
                    description: Spec is the specification of the desired behavior
                      of the machine.
                    properties:
                      dataTemplate:
                        description: MetadataTemplate is a reference to a Metal3DataTemplate
                          object containing a template of metadata to be rendered.
                          Metadata keys defined in the metadataTemplate take precendence
                          over keys defined in metadata field.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                      hostSelector:
                        description: HostSelector specifies matching criteria for
                          labels on BareMetalHosts. This is used to limit the set
                          of BareMetalHost objects considered for claiming for a metal3machine.
                        properties:
                          matchExpressions:
                            description: Label match expressions that must be true
                              on a chosen BareMetalHost
                            items:
                              properties:
                                key:
                                  type: string
                                operator:
                                  description: Operator represents a key/field's relationship
                                    to value(s). See labels.Requirement and fields.Requirement
                                    for more details.
                                  type: string
                                values:
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              - values
                              type: object
                            type: array
                          matchLabels:
                            additionalProperties:
                              type: string
                            description: Key/value pairs of labels that must exist
                              on a chosen BareMetalHost
                            type: object
                        type: object
                      image:
                        description: Image is the image to be provisioned.
                        properties:
                          checksum:
                            description: Checksum is a md5sum value or a URL to retrieve
                              one.
                            type: string
                          checksumType:
                            description: ChecksumType is the checksum algorithm for
                              the image. e.g md5, sha256, sha512
                            enum:
                            - md5
                            - sha256
                            - sha512
                            type: string
                          format:
                            description: DiskFormat contains the image disk format
                            enum:
                            - raw
                            - qcow2
                            - vdi
                            - vmdk
                            type: string
                          url:
                            description: URL is a location of an image to deploy.
                            type: string
                        required:
                        - checksum
                        - url
                        type: object
                      metaData:
                        description: MetaData is an object storing the reference to
                          the secret containing the Metadata given by the user.
                        properties:
                          name:
                            description: Name is unique within a namespace to reference
                              a secret resource.
                            type: string
                          namespace:
                            description: Namespace defines the space within which
                              the secret name must be unique.
                            type: string
                        type: object
                      networkData:
                        description: NetworkData is an object storing the reference
                          to the secret containing the network data given by the user.
                        properties:
                          name:
                            description: Name is unique within a namespace to reference
                              a secret resource.
                            type: string
                          namespace:
                            description: Namespace defines the space within which
                              the secret name must be unique.
                            type: string
                        type: object
                      providerID:
                        description: ProviderID will be the Metal3 machine in ProviderID
                          format (metal3://<bmh-uuid>)
                        type: string
                      userData:
                        description: UserData references the Secret that holds user
                          data needed by the bare metal operator. The Namespace is
                          optional; it will default to the metal3machine's namespace
                          if not specified.
                        properties:
                          name:
                            description: Name is unique within a namespace to reference
                              a secret resource.
                            type: string
                          namespace:
                            description: Namespace defines the space within which
                              the secret name must be unique.
                            type: string
                        type: object
                    required:
                    - image
                    type: object
                required:
                - spec
                type: object
            required:
            - template
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
